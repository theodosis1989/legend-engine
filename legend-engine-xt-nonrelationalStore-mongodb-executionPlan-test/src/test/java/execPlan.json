{
  "serializer": {
    "name": "pure",
    "version": "vX_X_X"
  },
  "rootExecutionNode": {
    "pure": {
      "function": "serialize",
      "fControl": "serialize_T_MANY__RootGraphFetchTree_1__String_1_",
      "parameters": [
        {
          "multiplicity": {
            "lowerBound": 0
          },
          "_type": "collection"
        },
        {
          "type": "rootGraphFetchTree",
          "value": {
            "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person",
            "_type": "rootGraphFetchTree",
            "subTrees": [
              {
                "property": "firstName",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "lastName",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "age",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "birthDate",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "phoneNumber",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "otherPhoneNumbers",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "email",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "address",
                "_type": "propertyGraphFetchTree",
                "subTrees": [
                  {
                    "property": "street",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "city",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "postalCode",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "country",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "countryCode",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "continent",
                        "_type": "propertyGraphFetchTree"
                      }
                    ]
                  }
                ]
              },
              {
                "property": "car",
                "_type": "propertyGraphFetchTree",
                "subTrees": [
                  {
                    "property": "model",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "manufacturer",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "name",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "property": "firm",
                "_type": "propertyGraphFetchTree",
                "subTrees": [
                  {
                    "property": "legalName",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "dateFounded",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "industrySectors",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "address",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "street",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "postalCode",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "_type": "classInstance"
        }
      ],
      "_type": "func"
    },
    "_type": "pureExp",
    "resultType": {
      "dataType": "String",
      "_type": "dataType"
    },
    "executionNodes": [
      {
        "store": "test::mongodb::mydatabase",
        "graphFetchTree": {
          "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person",
          "_type": "rootGraphFetchTree",
          "subTrees": [
            {
              "property": "firstName",
              "_type": "propertyGraphFetchTree"
            },
            {
              "property": "lastName",
              "_type": "propertyGraphFetchTree"
            },
            {
              "property": "age",
              "_type": "propertyGraphFetchTree"
            },
            {
              "property": "birthDate",
              "_type": "propertyGraphFetchTree"
            },
            {
              "property": "phoneNumber",
              "_type": "propertyGraphFetchTree"
            },
            {
              "property": "otherPhoneNumbers",
              "_type": "propertyGraphFetchTree"
            },
            {
              "property": "email",
              "_type": "propertyGraphFetchTree"
            },
            {
              "property": "address",
              "_type": "propertyGraphFetchTree",
              "subTrees": [
                {
                  "property": "street",
                  "_type": "propertyGraphFetchTree"
                },
                {
                  "property": "city",
                  "_type": "propertyGraphFetchTree"
                },
                {
                  "property": "postalCode",
                  "_type": "propertyGraphFetchTree"
                },
                {
                  "property": "country",
                  "_type": "propertyGraphFetchTree",
                  "subTrees": [
                    {
                      "property": "countryCode",
                      "_type": "propertyGraphFetchTree"
                    },
                    {
                      "property": "continent",
                      "_type": "propertyGraphFetchTree"
                    }
                  ]
                }
              ]
            },
            {
              "property": "car",
              "_type": "propertyGraphFetchTree",
              "subTrees": [
                {
                  "property": "model",
                  "_type": "propertyGraphFetchTree"
                },
                {
                  "property": "manufacturer",
                  "_type": "propertyGraphFetchTree",
                  "subTrees": [
                    {
                      "property": "name",
                      "_type": "propertyGraphFetchTree"
                    },
                    {
                      "property": "country",
                      "_type": "propertyGraphFetchTree",
                      "subTrees": [
                        {
                          "property": "countryCode",
                          "_type": "propertyGraphFetchTree"
                        },
                        {
                          "property": "continent",
                          "_type": "propertyGraphFetchTree"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "property": "firm",
              "_type": "propertyGraphFetchTree",
              "subTrees": [
                {
                  "property": "legalName",
                  "_type": "propertyGraphFetchTree"
                },
                {
                  "property": "dateFounded",
                  "_type": "propertyGraphFetchTree"
                },
                {
                  "property": "industrySectors",
                  "_type": "propertyGraphFetchTree"
                },
                {
                  "property": "address",
                  "_type": "propertyGraphFetchTree",
                  "subTrees": [
                    {
                      "property": "street",
                      "_type": "propertyGraphFetchTree"
                    },
                    {
                      "property": "postalCode",
                      "_type": "propertyGraphFetchTree"
                    },
                    {
                      "property": "country",
                      "_type": "propertyGraphFetchTree",
                      "subTrees": [
                        {
                          "property": "countryCode",
                          "_type": "propertyGraphFetchTree"
                        },
                        {
                          "property": "continent",
                          "_type": "propertyGraphFetchTree"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "localGraphFetchExecutionNode": {
          "checked": false,
          "children": [
            {
              "children": [
                {
                  "nodeIndex": 12,
                  "parentIndex": 8,
                  "graphFetchTree": {
                    "property": "country",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "countryCode",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "continent",
                        "_type": "propertyGraphFetchTree"
                      }
                    ]
                  },
                  "_type": "inMemoryPropertyGraphFetch",
                  "resultType": {
                    "propertiesWithParameters": [
                      {
                        "property": "countryCode"
                      },
                      {
                        "property": "continent"
                      }
                    ],
                    "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country",
                    "setImplementations": [
                      {
                        "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country",
                        "mapping": "test::mongodb::TestPersonMapping",
                        "id": "Person_address_country",
                        "propertyMappings": [
                          {
                            "property": "continent",
                            "type": "String"
                          },
                          {
                            "property": "countryCode",
                            "type": "String"
                          }
                        ]
                      }
                    ],
                    "_type": "partialClass"
                  },
                  "implementation": {
                    "executionClassFullName": "_pure.plan.root.n1.localGraph.localChild0.localChild0.Execute",
                    "_type": "java"
                  }
                }
              ],
              "nodeIndex": 8,
              "parentIndex": 0,
              "graphFetchTree": {
                "property": "address",
                "_type": "propertyGraphFetchTree",
                "subTrees": [
                  {
                    "property": "street",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "city",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "postalCode",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "country",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "countryCode",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "continent",
                        "_type": "propertyGraphFetchTree"
                      }
                    ]
                  }
                ]
              },
              "_type": "inMemoryPropertyGraphFetch",
              "resultType": {
                "propertiesWithParameters": [
                  {
                    "property": "street"
                  },
                  {
                    "property": "city"
                  },
                  {
                    "property": "postalCode"
                  },
                  {
                    "property": "country"
                  }
                ],
                "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address",
                "setImplementations": [
                  {
                    "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address",
                    "mapping": "test::mongodb::TestPersonMapping",
                    "id": "Person_address",
                    "propertyMappings": [
                      {
                        "property": "street",
                        "type": "String"
                      },
                      {
                        "property": "city",
                        "type": "String"
                      },
                      {
                        "property": "postalCode",
                        "type": "String"
                      }
                    ]
                  }
                ],
                "_type": "partialClass"
              },
              "implementation": {
                "executionClassFullName": "_pure.plan.root.n1.localGraph.localChild0.Execute",
                "_type": "java"
              }
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "nodeIndex": 19,
                      "parentIndex": 17,
                      "graphFetchTree": {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      },
                      "_type": "inMemoryPropertyGraphFetch",
                      "resultType": {
                        "propertiesWithParameters": [
                          {
                            "property": "countryCode"
                          },
                          {
                            "property": "continent"
                          }
                        ],
                        "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country",
                        "setImplementations": [
                          {
                            "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country",
                            "mapping": "test::mongodb::TestPersonMapping",
                            "id": "Person_car_manufacturer_country",
                            "propertyMappings": [
                              {
                                "property": "continent",
                                "type": "String"
                              },
                              {
                                "property": "countryCode",
                                "type": "String"
                              }
                            ]
                          }
                        ],
                        "_type": "partialClass"
                      },
                      "implementation": {
                        "executionClassFullName": "_pure.plan.root.n1.localGraph.localChild1.localChild0.localChild0.Execute",
                        "_type": "java"
                      }
                    }
                  ],
                  "nodeIndex": 17,
                  "parentIndex": 15,
                  "graphFetchTree": {
                    "property": "manufacturer",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "name",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      }
                    ]
                  },
                  "_type": "inMemoryPropertyGraphFetch",
                  "resultType": {
                    "propertiesWithParameters": [
                      {
                        "property": "name"
                      },
                      {
                        "property": "country"
                      }
                    ],
                    "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer",
                    "setImplementations": [
                      {
                        "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer",
                        "mapping": "test::mongodb::TestPersonMapping",
                        "id": "Person_car_manufacturer",
                        "propertyMappings": [
                          {
                            "property": "name",
                            "type": "String"
                          }
                        ]
                      }
                    ],
                    "_type": "partialClass"
                  },
                  "implementation": {
                    "executionClassFullName": "_pure.plan.root.n1.localGraph.localChild1.localChild0.Execute",
                    "_type": "java"
                  }
                }
              ],
              "nodeIndex": 15,
              "parentIndex": 0,
              "graphFetchTree": {
                "property": "car",
                "_type": "propertyGraphFetchTree",
                "subTrees": [
                  {
                    "property": "model",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "manufacturer",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "name",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "_type": "inMemoryPropertyGraphFetch",
              "resultType": {
                "propertiesWithParameters": [
                  {
                    "property": "model"
                  },
                  {
                    "property": "manufacturer"
                  }
                ],
                "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car",
                "setImplementations": [
                  {
                    "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car",
                    "mapping": "test::mongodb::TestPersonMapping",
                    "id": "Person_car",
                    "propertyMappings": [
                      {
                        "property": "model",
                        "type": "String"
                      }
                    ]
                  }
                ],
                "_type": "partialClass"
              },
              "implementation": {
                "executionClassFullName": "_pure.plan.root.n1.localGraph.localChild1.Execute",
                "_type": "java"
              }
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "nodeIndex": 29,
                      "parentIndex": 26,
                      "graphFetchTree": {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      },
                      "_type": "inMemoryPropertyGraphFetch",
                      "resultType": {
                        "propertiesWithParameters": [
                          {
                            "property": "countryCode"
                          },
                          {
                            "property": "continent"
                          }
                        ],
                        "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country",
                        "setImplementations": [
                          {
                            "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country",
                            "mapping": "test::mongodb::TestPersonMapping",
                            "id": "Person_firm_address_country",
                            "propertyMappings": [
                              {
                                "property": "continent",
                                "type": "String"
                              },
                              {
                                "property": "countryCode",
                                "type": "String"
                              }
                            ]
                          }
                        ],
                        "_type": "partialClass"
                      },
                      "implementation": {
                        "executionClassFullName": "_pure.plan.root.n1.localGraph.localChild2.localChild0.localChild0.Execute",
                        "_type": "java"
                      }
                    }
                  ],
                  "nodeIndex": 26,
                  "parentIndex": 22,
                  "graphFetchTree": {
                    "property": "address",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "street",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "postalCode",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      }
                    ]
                  },
                  "_type": "inMemoryPropertyGraphFetch",
                  "resultType": {
                    "propertiesWithParameters": [
                      {
                        "property": "street"
                      },
                      {
                        "property": "postalCode"
                      },
                      {
                        "property": "country"
                      }
                    ],
                    "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address",
                    "setImplementations": [
                      {
                        "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address",
                        "mapping": "test::mongodb::TestPersonMapping",
                        "id": "Person_firm_address",
                        "propertyMappings": [
                          {
                            "property": "street",
                            "type": "String"
                          },
                          {
                            "property": "city",
                            "type": "String"
                          },
                          {
                            "property": "postalCode",
                            "type": "String"
                          }
                        ]
                      }
                    ],
                    "_type": "partialClass"
                  },
                  "implementation": {
                    "executionClassFullName": "_pure.plan.root.n1.localGraph.localChild2.localChild0.Execute",
                    "_type": "java"
                  }
                }
              ],
              "nodeIndex": 22,
              "parentIndex": 0,
              "graphFetchTree": {
                "property": "firm",
                "_type": "propertyGraphFetchTree",
                "subTrees": [
                  {
                    "property": "legalName",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "dateFounded",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "industrySectors",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "address",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "street",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "postalCode",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "_type": "inMemoryPropertyGraphFetch",
              "resultType": {
                "propertiesWithParameters": [
                  {
                    "property": "legalName"
                  },
                  {
                    "property": "dateFounded"
                  },
                  {
                    "property": "industrySectors"
                  },
                  {
                    "property": "address"
                  }
                ],
                "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm",
                "setImplementations": [
                  {
                    "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm",
                    "mapping": "test::mongodb::TestPersonMapping",
                    "id": "Person_firm",
                    "propertyMappings": [
                      {
                        "property": "legalName",
                        "type": "String"
                      },
                      {
                        "property": "dateFounded",
                        "type": "DateTime"
                      },
                      {
                        "property": "industrySectors",
                        "type": "String"
                      }
                    ]
                  }
                ],
                "_type": "partialClass"
              },
              "implementation": {
                "executionClassFullName": "_pure.plan.root.n1.localGraph.localChild2.Execute",
                "_type": "java"
              }
            }
          ],
          "nodeIndex": 0,
          "graphFetchTree": {
            "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person",
            "_type": "rootGraphFetchTree",
            "subTrees": [
              {
                "property": "firstName",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "lastName",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "age",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "birthDate",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "phoneNumber",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "otherPhoneNumbers",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "email",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "address",
                "_type": "propertyGraphFetchTree",
                "subTrees": [
                  {
                    "property": "street",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "city",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "postalCode",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "country",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "countryCode",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "continent",
                        "_type": "propertyGraphFetchTree"
                      }
                    ]
                  }
                ]
              },
              {
                "property": "car",
                "_type": "propertyGraphFetchTree",
                "subTrees": [
                  {
                    "property": "model",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "manufacturer",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "name",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "property": "firm",
                "_type": "propertyGraphFetchTree",
                "subTrees": [
                  {
                    "property": "legalName",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "dateFounded",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "industrySectors",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "address",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "street",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "postalCode",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "_type": "inMemoryRootGraphFetch",
          "resultType": {
            "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person",
            "_type": "class"
          },
          "executionNodes": [
            {
              "contentType": "application\/json",
              "binding": "meta::external::store::mongodb::showcase::store::PersonCollectionBinding",
              "enableConstraints": false,
              "checked": false,
              "tree": {
                "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person",
                "_type": "rootGraphFetchTree",
                "subTrees": [
                  {
                    "property": "firstName",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "lastName",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "age",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "birthDate",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "phoneNumber",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "otherPhoneNumbers",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "email",
                    "_type": "propertyGraphFetchTree"
                  },
                  {
                    "property": "address",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "street",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "city",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "postalCode",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "country",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "countryCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "continent",
                            "_type": "propertyGraphFetchTree"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "property": "car",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "model",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "manufacturer",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "name",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "country",
                            "_type": "propertyGraphFetchTree",
                            "subTrees": [
                              {
                                "property": "countryCode",
                                "_type": "propertyGraphFetchTree"
                              },
                              {
                                "property": "continent",
                                "_type": "propertyGraphFetchTree"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "property": "firm",
                    "_type": "propertyGraphFetchTree",
                    "subTrees": [
                      {
                        "property": "legalName",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "dateFounded",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "industrySectors",
                        "_type": "propertyGraphFetchTree"
                      },
                      {
                        "property": "address",
                        "_type": "propertyGraphFetchTree",
                        "subTrees": [
                          {
                            "property": "street",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "postalCode",
                            "_type": "propertyGraphFetchTree"
                          },
                          {
                            "property": "country",
                            "_type": "propertyGraphFetchTree",
                            "subTrees": [
                              {
                                "property": "countryCode",
                                "_type": "propertyGraphFetchTree"
                              },
                              {
                                "property": "continent",
                                "_type": "propertyGraphFetchTree"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "_type": "MongoDBDocumentInternalizeExecutionNode",
              "resultType": {
                "propertiesWithParameters": [
                  {
                    "property": "firstName"
                  },
                  {
                    "property": "lastName"
                  },
                  {
                    "property": "age"
                  },
                  {
                    "property": "birthDate"
                  },
                  {
                    "property": "phoneNumber"
                  },
                  {
                    "property": "otherPhoneNumbers"
                  },
                  {
                    "property": "email"
                  },
                  {
                    "property": "address"
                  },
                  {
                    "property": "car"
                  },
                  {
                    "property": "firm"
                  }
                ],
                "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person",
                "_type": "partialClass"
              },
              "executionNodes": [
                {
                  "databaseCommand": "{\"type\":\"aggregate\",\"collectionName\":\"person\",\"aggregationPipeline\":{\"stages\":[{\"expression\":{\"expression\":{\"expressions\":[{\"expressions\":[{\"fieldPath\":\"$birthDate\",\"_type\":\"fieldPathExpression\"},{\"value\":{\"value\":\"1985-04-04T00:00:00+0000\",\"_type\":\"dateTypeValue\"},\"_type\":\"literalValue\"}],\"_type\":\"eqOperatorExpression\"},{\"expressions\":[{\"fieldPath\":\"$birthDate\",\"_type\":\"fieldPathExpression\"},{\"value\":{\"value\":\"1970-04-04T17:18:23+0000\",\"_type\":\"dateTypeValue\"},\"_type\":\"literalValue\"}],\"_type\":\"eqOperatorExpression\"}],\"_type\":\"orOperatorExpression\"},\"_type\":\"exprQueryExpression\"},\"_type\":\"matchStage\"},{\"projections\":{\"keyValues\":[{\"key\":{\"fieldPath\":\"firstName\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"lastName\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"age\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"birthDate\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"phoneNumber\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"otherPhoneNumbers\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"email\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"address.street\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"address.city\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"address.postalCode\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"address.country.countryCode\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"address.country.continent\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"car.model\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"car.manufacturer.name\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"car.manufacturer.country.countryCode\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"car.manufacturer.country.continent\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"firm.legalName\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"firm.dateFounded\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"firm.industrySectors\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"firm.address.street\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"firm.address.postalCode\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"firm.address.country.countryCode\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"},{\"key\":{\"fieldPath\":\"firm.address.country.continent\",\"_type\":\"fieldPathExpression\"},\"value\":{\"value\":{\"value\":1,\"_type\":\"intTypeValue\"},\"_type\":\"literalValue\"},\"_type\":\"queryExprKeyValue\"}],\"_type\":\"objectQueryExpression\"},\"_type\":\"projectStage\"}],\"_type\":\"aggregationPipeline\"},\"_type\":\"databaseCommand\"}",
                  "connection": {
                    "type": "MongoDb",
                    "dataSourceSpecification": {
                      "serverURLs": [
                        {
                          "baseUrl": "localhost",
                          "port": 58571
                        }
                      ],
                      "databaseName": "userDatabase"
                    },
                    "authenticationSpecification": {
                      "username": "sa",
                      "password": {
                        "systemPropertyName": "mongo_pwd",
                        "_type": "systemproperties"
                      },
                      "_type": "userPassword"
                    },
                    "_type": "MongoDBConnection",
                    "element": "test::mongodb::mydatabase"
                  },
                  "_type": "MongoDBExecutionNode",
                  "resultType": {
                    "dataType": "meta::pure::metamodel::type::Any",
                    "_type": "dataType"
                  }
                }
              ],
              "implementation": {
                "executionClassFullName": "_pure.plan.root.n1.localGraph.n1.Execute",
                "_type": "java"
              }
            }
          ],
          "implementation": {
            "executionClassFullName": "_pure.plan.root.n1.localGraph.Execute",
            "_type": "java"
          }
        },
        "enableConstraints": false,
        "checked": false,
        "localTreeIndices": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31
        ],
        "_type": "storeMappingGlobalGraphFetchExecutionNode",
        "resultType": {
          "propertiesWithParameters": [
            {
              "property": "firstName"
            },
            {
              "property": "lastName"
            },
            {
              "property": "age"
            },
            {
              "property": "birthDate"
            },
            {
              "property": "phoneNumber"
            },
            {
              "property": "otherPhoneNumbers"
            },
            {
              "property": "email"
            },
            {
              "property": "address"
            },
            {
              "property": "car"
            },
            {
              "property": "firm"
            }
          ],
          "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person",
          "setImplementations": [
            {
              "class": "meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person",
              "mapping": "test::mongodb::TestPersonMapping",
              "id": "Person",
              "propertyMappings": [
                {
                  "property": "firstName",
                  "type": "String"
                },
                {
                  "property": "lastName",
                  "type": "String"
                },
                {
                  "property": "age",
                  "type": "Integer"
                },
                {
                  "property": "birthDate",
                  "type": "DateTime"
                },
                {
                  "property": "phoneNumber",
                  "type": "String"
                },
                {
                  "property": "otherPhoneNumbers",
                  "type": "String"
                },
                {
                  "property": "email",
                  "type": "String"
                }
              ]
            }
          ],
          "_type": "partialClass"
        },
        "resultSizeRange": {
          "lowerBound": 0
        }
      }
    ],
    "implementation": {
      "executionClassFullName": "_pure.plan.root.Serialize",
      "_type": "java"
    }
  },
  "globalImplementationSupport": {
    "classes": [
      {
        "package": "_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test",
        "name": "Address",
        "source": "package _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Address extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    default String typeName$()\n    {\n        return \"Address\";\n    }\n\n    default String typePath$()\n    {\n        return \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\";\n    }\n\n    String getStreet();\n    String getCity();\n    String getPostalCode();\n    Country getCountry();\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "package": "_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test",
        "name": "Car",
        "source": "package _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Car extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    default String typeName$()\n    {\n        return \"Car\";\n    }\n\n    default String typePath$()\n    {\n        return \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car\";\n    }\n\n    String getModel();\n    Person getPerson();\n    Manufacturer getManufacturer();\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "package": "_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test",
        "name": "Country",
        "source": "package _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Country extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    default String typeName$()\n    {\n        return \"Country\";\n    }\n\n    default String typePath$()\n    {\n        return \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\";\n    }\n\n    String getContinent();\n    String getCountryCode();\n    Manufacturer getManufacturer();\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "package": "_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test",
        "name": "Firm",
        "source": "package _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Firm extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    default String typeName$()\n    {\n        return \"Firm\";\n    }\n\n    default String typePath$()\n    {\n        return \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\";\n    }\n\n    String getLegalName();\n    PureDate getDateFounded();\n    List<String> getIndustrySectors();\n    Address getAddress();\n    Person getPerson();\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "package": "_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test",
        "name": "Manufacturer",
        "source": "package _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Manufacturer extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    default String typeName$()\n    {\n        return \"Manufacturer\";\n    }\n\n    default String typePath$()\n    {\n        return \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer\";\n    }\n\n    String getName();\n    Car getCar();\n    Country getCountry();\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "package": "_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test",
        "name": "Person",
        "source": "package _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Person extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    default String typeName$()\n    {\n        return \"Person\";\n    }\n\n    default String typePath$()\n    {\n        return \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\";\n    }\n\n    String getFirstName();\n    String getLastName();\n    Long getAge();\n    PureDate getBirthDate();\n    String getPhoneNumber();\n    List<String> getOtherPhoneNumbers();\n    String getEmail();\n    Address getAddress();\n    List<Car> getCar();\n    Firm getFirm();\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "package": "_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test",
        "name": "Person_TestPersonMapping_Person",
        "source": "package _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Person_TestPersonMapping_Person extends Person, org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    default String typeName$()\n    {\n        return \"Person_TestPersonMapping_Person\";\n    }\n\n    default String typePath$()\n    {\n        return \"Person_TestPersonMapping_Person\";\n    }\n\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "package": "_pure.app.meta.pure.mapping.modelToModel",
        "name": "JsonDataRecord",
        "source": "package _pure.app.meta.pure.mapping.modelToModel;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface JsonDataRecord\n{\n    default String typeName$()\n    {\n        return \"JsonDataRecord\";\n    }\n\n    default String typePath$()\n    {\n        return \"meta::pure::mapping::modelToModel::JsonDataRecord\";\n    }\n\n    long getNumber();\n    String getRecord();\n}"
      },
      {
        "package": "_pure.plan.root",
        "name": "Serialize",
        "source": "package _pure.plan.root;\n\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\nimport org.finos.legend.engine.plan.dependencies.store.platform.IPlatformPureExpressionExecutionNodeSerializeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\n\npublic class Serialize implements IPlatformPureExpressionExecutionNodeSerializeSpecifics\n{\n    public IGraphSerializer<?> serializer(ISerializationWriter writer,\n                                          IExecutionNodeContext context)\n    {\n        return new Serializer(writer, context);\n    }\n}"
      },
      {
        "package": "_pure.plan.root",
        "name": "Serializer",
        "source": "package _pure.plan.root;\n\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address;\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car;\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country;\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm;\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer;\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person;\nimport java.util.List;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\npublic class Serializer implements IGraphSerializer<Person>\n{\n    private ISerializationWriter writer;\n    private IExecutionNodeContext context;\n\n    Serializer(ISerializationWriter writer, IExecutionNodeContext context)\n    {\n        this.writer = writer;\n        this.context = context;\n    }\n\n    public void serialize(Person value)\n    {\n        if (value instanceof IReferencedObject)\n        {\n            this.writer\n                .startObject(value.typePath$(),\n                             ((IReferencedObject) value).getAlloyStoreObjectReference$());\n        }\n        else\n        {\n            this.writer.startObject(value.typePath$());\n        }\n        this.writer.writeStringProperty(\"firstName\", value.getFirstName());\n        this.writer.writeStringProperty(\"lastName\", value.getLastName());\n        this.writer.writeIntegerProperty(\"age\", value.getAge());\n        this.writer.writeDateTimeProperty(\"birthDate\", value.getBirthDate());\n        this.writer.writeStringProperty(\"phoneNumber\", value.getPhoneNumber());\n        this.writer\n            .writeStringProperty(\"otherPhoneNumbers\",\n                                 value.getOtherPhoneNumbers());\n        this.writer.writeStringProperty(\"email\", value.getEmail());\n        this.writer\n            .writeComplexProperty(\"address\",\n                                  value.getAddress(),\n                                  this::writeAddress_address);\n        this.writer\n            .writeComplexProperty(\"car\",\n                                  value.getCar(),\n                                  this::writeCar_car);\n        this.writer\n            .writeComplexProperty(\"firm\",\n                                  value.getFirm(),\n                                  this::writeFirm_firm);\n        this.writer.endObject();\n    }\n\n    public void writeAddress_address(Address value)\n    {\n        this.writer\n            .startObject(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\");\n        this.writer.writeStringProperty(\"street\", value.getStreet());\n        this.writer.writeStringProperty(\"city\", value.getCity());\n        this.writer.writeStringProperty(\"postalCode\", value.getPostalCode());\n        this.writer\n            .writeComplexProperty(\"country\",\n                                  value.getCountry(),\n                                  this::writeCountry_address_country);\n        this.writer.endObject();\n    }\n\n    public void writeCountry_address_country(Country value)\n    {\n        this.writer\n            .startObject(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\");\n        this.writer.writeStringProperty(\"countryCode\", value.getCountryCode());\n        this.writer.writeStringProperty(\"continent\", value.getContinent());\n        this.writer.endObject();\n    }\n\n    public void writeCar_car(Car value)\n    {\n        this.writer\n            .startObject(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car\");\n        this.writer.writeStringProperty(\"model\", value.getModel());\n        this.writer\n            .writeComplexProperty(\"manufacturer\",\n                                  value.getManufacturer(),\n                                  this::writeManufacturer_car_manufacturer);\n        this.writer.endObject();\n    }\n\n    public void writeManufacturer_car_manufacturer(Manufacturer value)\n    {\n        this.writer\n            .startObject(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer\");\n        this.writer.writeStringProperty(\"name\", value.getName());\n        this.writer\n            .writeComplexProperty(\"country\",\n                                  value.getCountry(),\n                                  this::writeCountry_car_manufacturer_country);\n        this.writer.endObject();\n    }\n\n    public void writeCountry_car_manufacturer_country(Country value)\n    {\n        this.writer\n            .startObject(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\");\n        this.writer.writeStringProperty(\"countryCode\", value.getCountryCode());\n        this.writer.writeStringProperty(\"continent\", value.getContinent());\n        this.writer.endObject();\n    }\n\n    public void writeFirm_firm(Firm value)\n    {\n        this.writer\n            .startObject(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\");\n        this.writer.writeStringProperty(\"legalName\", value.getLegalName());\n        this.writer\n            .writeDateTimeProperty(\"dateFounded\",\n                                   value.getDateFounded());\n        this.writer\n            .writeStringProperty(\"industrySectors\",\n                                 value.getIndustrySectors());\n        this.writer\n            .writeComplexProperty(\"address\",\n                                  value.getAddress(),\n                                  this::writeAddress_firm_address);\n        this.writer.endObject();\n    }\n\n    public void writeAddress_firm_address(Address value)\n    {\n        this.writer\n            .startObject(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\");\n        this.writer.writeStringProperty(\"street\", value.getStreet());\n        this.writer.writeStringProperty(\"postalCode\", value.getPostalCode());\n        this.writer\n            .writeComplexProperty(\"country\",\n                                  value.getCountry(),\n                                  this::writeCountry_firm_address_country);\n        this.writer.endObject();\n    }\n\n    public void writeCountry_firm_address_country(Country value)\n    {\n        this.writer\n            .startObject(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\");\n        this.writer.writeStringProperty(\"countryCode\", value.getCountryCode());\n        this.writer.writeStringProperty(\"continent\", value.getContinent());\n        this.writer.endObject();\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph",
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph;\n\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person;\nimport java.util.HashMap;\nimport java.util.List;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryRootGraphFetchExecutionNodeSpecifics;\n\npublic class Execute implements IInMemoryRootGraphFetchExecutionNodeSpecifics\n{\n    public HashMap<Object, Object> sharedObject = new HashMap();\n\n    public Object transform(Object input)\n    {\n        Person src = (Person) input;\n        GraphFetch_Node0_Person_Impl result = new GraphFetch_Node0_Person_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"Person\");\n        try\n        {\n            result.setFirstName(src.getFirstName());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'firstName' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person [Person]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setLastName(src.getLastName());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'lastName' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person [Person]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setAge(src.getAge());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'age' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person [Person]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setBirthDate(src.getBirthDate());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'birthDate' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person [Person]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setPhoneNumber(src.getPhoneNumber());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'phoneNumber' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person [Person]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setOtherPhoneNumbers(src.getOtherPhoneNumbers());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'otherPhoneNumbers' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person [Person]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setEmail(src.getEmail());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'email' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person [Person]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        return new IGraphInstance<GraphFetch_Node0_Person_Impl>()\n        {\n            public GraphFetch_Node0_Person_Impl getValue()\n            {\n                return result;\n            }\n            public long instanceSize()\n            {\n                return result.getInstanceSize$();\n            }\n        };\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph",
        "name": "GraphFetch_Node0_Person_Impl",
        "source": "package _pure.plan.root.n1.localGraph;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node0_Person_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person>, java.io.Serializable\n{\n    private String firstName;\n    private String lastName;\n    private Long age;\n    private PureDate birthDate;\n    private String phoneNumber;\n    private List<String> otherPhoneNumbers;\n    private String email;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address address;\n    private List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> car;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm firm;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 643632538L;\n\n    public String getFirstName()\n    {\n        return this.firstName;\n    }\n\n    public void setFirstName(String firstName)\n    {\n        this.firstName = firstName;\n    }\n\n    public void addFirstName(String object)\n    {\n        if ((Object) this.firstName != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'firstName' of multiplicity with bound 1\");\n        }\n        this.firstName = object;\n    }\n\n    public String getLastName()\n    {\n        return this.lastName;\n    }\n\n    public void setLastName(String lastName)\n    {\n        this.lastName = lastName;\n    }\n\n    public void addLastName(String object)\n    {\n        if ((Object) this.lastName != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'lastName' of multiplicity with bound 1\");\n        }\n        this.lastName = object;\n    }\n\n    public Long getAge()\n    {\n        return this.age;\n    }\n\n    public void setAge(Long age)\n    {\n        this.age = age;\n    }\n\n    public void addAge(Long object)\n    {\n        if ((Object) this.age != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'age' of multiplicity with bound 1\");\n        }\n        this.age = object;\n    }\n\n    public PureDate getBirthDate()\n    {\n        return this.birthDate;\n    }\n\n    public void setBirthDate(PureDate birthDate)\n    {\n        this.birthDate = birthDate;\n    }\n\n    public void addBirthDate(PureDate object)\n    {\n        if ((Object) this.birthDate != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'birthDate' of multiplicity with bound 1\");\n        }\n        this.birthDate = object;\n    }\n\n    public String getPhoneNumber()\n    {\n        return this.phoneNumber;\n    }\n\n    public void setPhoneNumber(String phoneNumber)\n    {\n        this.phoneNumber = phoneNumber;\n    }\n\n    public void addPhoneNumber(String object)\n    {\n        if ((Object) this.phoneNumber != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'phoneNumber' of multiplicity with bound 1\");\n        }\n        this.phoneNumber = object;\n    }\n\n    public List<String> getOtherPhoneNumbers()\n    {\n        return this.otherPhoneNumbers == null\n                   ? Collections.<String>emptyList()\n                   : this.otherPhoneNumbers;\n    }\n\n    public void setOtherPhoneNumbers(List<String> otherPhoneNumbers)\n    {\n        this.otherPhoneNumbers = otherPhoneNumbers;\n    }\n\n    public void addOtherPhoneNumbers(String object)\n    {\n        if (this.otherPhoneNumbers == null)\n        {\n            this.otherPhoneNumbers = new ArrayList<String>();\n        }\n        this.otherPhoneNumbers.add(object);\n    }\n\n    public String getEmail()\n    {\n        return this.email;\n    }\n\n    public void setEmail(String email)\n    {\n        this.email = email;\n    }\n\n    public void addEmail(String object)\n    {\n        if ((Object) this.email != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'email' of multiplicity with bound 1\");\n        }\n        this.email = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address getAddress()\n    {\n        return this.address;\n    }\n\n    public void setAddress(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address address)\n    {\n        this.address = address;\n    }\n\n    public void addAddress(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address object)\n    {\n        if ((Object) this.address != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'address' of multiplicity with bound 1\");\n        }\n        this.address = object;\n    }\n\n    public List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> getCar()\n    {\n        return this.car == null\n                   ? Collections.<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>emptyList()\n                   : this.car;\n    }\n\n    public void setCar(List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> car)\n    {\n        this.car = car;\n    }\n\n    public void addCar(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car object)\n    {\n        if (this.car == null)\n        {\n            this.car = new ArrayList<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>();\n        }\n        this.car.add(object);\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm getFirm()\n    {\n        return this.firm;\n    }\n\n    public void setFirm(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm firm)\n    {\n        this.firm = firm;\n    }\n\n    public void addFirm(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm object)\n    {\n        if ((Object) this.firm != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'firm' of multiplicity with bound 1\");\n        }\n        this.firm = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person> toChecked(Object source,\n                                                                                                                                                                                       boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person getValue() { return GraphFetch_Node0_Person_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getAddress() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address>) this.getAddress())\n                                                                                                                                                                                                           .allConstraints(context)\n                                                                                                                                                                                                           .stream()\n                                                                                                                                                                                                           .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                                org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"address\")))\n                                                                                                                                                                                                           .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                           .collect(Collectors.toList()));\n            }\n            if (this.getCar() != null)\n            {\n                for (int i = 0; i < this.getCar().size(); i++)\n                {\n                    final int index = i;\n                    result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>) this.getCar()\n                                                                                                                                                                                                           .get(i))\n                                                                                                                                                                                                           .allConstraints(context)\n                                                                                                                                                                                                           .stream()\n                                                                                                                                                                                                           .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                                org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"car\", index)))\n                                                                                                                                                                                                           .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                           .collect(Collectors.toList()));\n                }\n            }\n            if (this.getFirm() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm>) this.getFirm())\n                                                                                                                                                                                                        .allConstraints(context)\n                                                                                                                                                                                                        .stream()\n                                                                                                                                                                                                        .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                             org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"firm\")))\n                                                                                                                                                                                                        .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                        .collect(Collectors.toList()));\n            }\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 364L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node0_Person_Impl.getClassSize$();\n        if (this.firstName != null)\n        {\n            size = size + this.firstName.length();\n        }\n        if (this.lastName != null)\n        {\n            size = size + this.lastName.length();\n        }\n        if (this.phoneNumber != null)\n        {\n            size = size + this.phoneNumber.length();\n        }\n        if (this.email != null)\n        {\n            size = size + this.email.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        if (this.otherPhoneNumbers != null)\n        {\n            for (String i: this.otherPhoneNumbers)\n            {\n                if (i != null)\n                {\n                    size = size + 20L;\n                    size = size + i.length();\n                }\n            }\n        }\n        if (this.car != null)\n        {\n            for (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car i: this.car)\n            {\n                if (i != null)\n                {\n                    size = size + 20L;\n                }\n            }\n        }\n        return size;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild0",
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReadingExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryPropertyGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IInMemoryPropertyGraphFetchExecutionNodeSpecifics\n{\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person, _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> propertyMappingTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person src) -> src.getAddress();\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address, GraphFetch_Node8_Address_Impl> targetSetTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address input) -> \n    {\n        _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address src = input;\n        GraphFetch_Node8_Address_Impl result = new GraphFetch_Node8_Address_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"Person_address\");\n        try\n        {\n            result.setStreet(src.getStreet());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'street' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address [Person_address]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setCity(src.getCity());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'city' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address [Person_address]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setPostalCode(src.getPostalCode());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'postalCode' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address [Person_address]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        return result;\n    };\n\n    public Stream<IGraphInstance> transformProperty(List<?> graphObjects)\n    {\n        Stream<IGraphInstance> propertyStream_0 = graphObjects.stream()\n                                                              .map(_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl.class::cast)\n                                                              .filter((_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl graphObject) -> graphObject != null)\n                                                              .filter((_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl graphObject) -> graphObject.getSetId$() == \"Person\")\n                                                              .flatMap((_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl graphObject) -> Optional.ofNullable(Execute.propertyMappingTransformer_0\n                                                                                                                                                                              .apply((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person) graphObject.getSrc$()))\n                                                                                                                                                           .map(Stream::of)\n                                                                                                                                                           .orElseGet(Stream::empty)\n                                                                                                                                                           .map((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address targetSrc) -> Execute.targetSetTransformer_0\n                                                                                                                                                                                                                                                                                  .apply(targetSrc))\n                                                                                                                                                           .filter((GraphFetch_Node8_Address_Impl $x) -> $x != null)\n                                                                                                                                                           .map((GraphFetch_Node8_Address_Impl targetGraphObject) ->\n        {\n            graphObject.addAddress(targetGraphObject);\n            return new IGraphInstance<GraphFetch_Node8_Address_Impl>()\n            {\n                public GraphFetch_Node8_Address_Impl getValue()\n                {\n                    return targetGraphObject;\n                }\n                public long instanceSize()\n                {\n                    return targetGraphObject.getInstanceSize$();\n                }\n            };\n        }).filter((IGraphInstance $x) -> $x != null));\n        return Stream.of(propertyStream_0).flatMap((Stream<IGraphInstance> x) -> x);\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild0",
        "name": "GraphFetch_Node8_Address_Impl",
        "source": "package _pure.plan.root.n1.localGraph.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node8_Address_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address>, java.io.Serializable\n{\n    private String street;\n    private String city;\n    private String postalCode;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country country;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 1659588503L;\n\n    public String getStreet()\n    {\n        return this.street;\n    }\n\n    public void setStreet(String street)\n    {\n        this.street = street;\n    }\n\n    public void addStreet(String object)\n    {\n        if ((Object) this.street != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'street' of multiplicity with bound 1\");\n        }\n        this.street = object;\n    }\n\n    public String getCity()\n    {\n        return this.city;\n    }\n\n    public void setCity(String city)\n    {\n        this.city = city;\n    }\n\n    public void addCity(String object)\n    {\n        if ((Object) this.city != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'city' of multiplicity with bound 1\");\n        }\n        this.city = object;\n    }\n\n    public String getPostalCode()\n    {\n        return this.postalCode;\n    }\n\n    public void setPostalCode(String postalCode)\n    {\n        this.postalCode = postalCode;\n    }\n\n    public void addPostalCode(String object)\n    {\n        if ((Object) this.postalCode != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'postalCode' of multiplicity with bound 1\");\n        }\n        this.postalCode = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country getCountry()\n    {\n        return this.country;\n    }\n\n    public void setCountry(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country country)\n    {\n        this.country = country;\n    }\n\n    public void addCountry(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country object)\n    {\n        if ((Object) this.country != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'country' of multiplicity with bound 1\");\n        }\n        this.country = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> toChecked(Object source,\n                                                                                                                                                                                        boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address getValue() { return GraphFetch_Node8_Address_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getCountry() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>) this.getCountry())\n                                                                                                                                                                                                           .allConstraints(context)\n                                                                                                                                                                                                           .stream()\n                                                                                                                                                                                                           .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                                org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"country\")))\n                                                                                                                                                                                                           .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                           .collect(Collectors.toList()));\n            }\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 180L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node8_Address_Impl.getClassSize$();\n        if (this.street != null)\n        {\n            size = size + this.street.length();\n        }\n        if (this.city != null)\n        {\n            size = size + this.city.length();\n        }\n        if (this.postalCode != null)\n        {\n            size = size + this.postalCode.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild0.localChild0",
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.localChild0.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReadingExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryPropertyGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IInMemoryPropertyGraphFetchExecutionNodeSpecifics\n{\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address, _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> propertyMappingTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address src) -> src.getCountry();\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country, GraphFetch_Node12_Country_Impl> targetSetTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country input) -> \n    {\n        _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country src = input;\n        GraphFetch_Node12_Country_Impl result = new GraphFetch_Node12_Country_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"Person_address_country\");\n        try\n        {\n            result.setCountryCode(src.getCountryCode());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'countryCode' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country [Person_address_country]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setContinent(src.getContinent());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'continent' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country [Person_address_country]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        return result;\n    };\n\n    public Stream<IGraphInstance> transformProperty(List<?> graphObjects)\n    {\n        Stream<IGraphInstance> propertyStream_0 = graphObjects.stream()\n                                                              .map(_pure.plan.root.n1.localGraph.localChild0.GraphFetch_Node8_Address_Impl.class::cast)\n                                                              .filter((_pure.plan.root.n1.localGraph.localChild0.GraphFetch_Node8_Address_Impl graphObject) -> graphObject != null)\n                                                              .filter((_pure.plan.root.n1.localGraph.localChild0.GraphFetch_Node8_Address_Impl graphObject) -> graphObject.getSetId$() == \"Person_address\")\n                                                              .flatMap((_pure.plan.root.n1.localGraph.localChild0.GraphFetch_Node8_Address_Impl graphObject) -> Optional.ofNullable(Execute.propertyMappingTransformer_0\n                                                                                                                                                                                           .apply((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address) graphObject.getSrc$()))\n                                                                                                                                                                        .map(Stream::of)\n                                                                                                                                                                        .orElseGet(Stream::empty)\n                                                                                                                                                                        .map((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country targetSrc) -> Execute.targetSetTransformer_0\n                                                                                                                                                                                                                                                                                               .apply(targetSrc))\n                                                                                                                                                                        .filter((GraphFetch_Node12_Country_Impl $x) -> $x != null)\n                                                                                                                                                                        .map((GraphFetch_Node12_Country_Impl targetGraphObject) ->\n        {\n            graphObject.addCountry(targetGraphObject);\n            return new IGraphInstance<GraphFetch_Node12_Country_Impl>()\n            {\n                public GraphFetch_Node12_Country_Impl getValue()\n                {\n                    return targetGraphObject;\n                }\n                public long instanceSize()\n                {\n                    return targetGraphObject.getInstanceSize$();\n                }\n            };\n        }).filter((IGraphInstance $x) -> $x != null));\n        return Stream.of(propertyStream_0).flatMap((Stream<IGraphInstance> x) -> x);\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild0.localChild0",
        "name": "GraphFetch_Node12_Country_Impl",
        "source": "package _pure.plan.root.n1.localGraph.localChild0.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node12_Country_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>, java.io.Serializable\n{\n    private String continent;\n    private String countryCode;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer manufacturer;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 471341855L;\n\n    public String getContinent()\n    {\n        return this.continent;\n    }\n\n    public void setContinent(String continent)\n    {\n        this.continent = continent;\n    }\n\n    public void addContinent(String object)\n    {\n        if ((Object) this.continent != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'continent' of multiplicity with bound 1\");\n        }\n        this.continent = object;\n    }\n\n    public String getCountryCode()\n    {\n        return this.countryCode;\n    }\n\n    public void setCountryCode(String countryCode)\n    {\n        this.countryCode = countryCode;\n    }\n\n    public void addCountryCode(String object)\n    {\n        if ((Object) this.countryCode != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'countryCode' of multiplicity with bound 1\");\n        }\n        this.countryCode = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer getManufacturer()\n    {\n        return this.manufacturer;\n    }\n\n    public void setManufacturer(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer manufacturer)\n    {\n        this.manufacturer = manufacturer;\n    }\n\n    public void addManufacturer(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer object)\n    {\n        if ((Object) this.manufacturer != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'manufacturer' of multiplicity with bound 1\");\n        }\n        this.manufacturer = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked(Object source,\n                                                                                                                                                                                        boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country getValue() { return GraphFetch_Node12_Country_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getManufacturer() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer>) this.getManufacturer())\n                                                                                                                                                                                                                .allConstraints(context)\n                                                                                                                                                                                                                .stream()\n                                                                                                                                                                                                                .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                                     org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"manufacturer\")))\n                                                                                                                                                                                                                .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                                .collect(Collectors.toList()));\n            }\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 156L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node12_Country_Impl.getClassSize$();\n        if (this.continent != null)\n        {\n            size = size + this.continent.length();\n        }\n        if (this.countryCode != null)\n        {\n            size = size + this.countryCode.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild1",
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.localChild1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReadingExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryPropertyGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IInMemoryPropertyGraphFetchExecutionNodeSpecifics\n{\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person, List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>> propertyMappingTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person src) -> src.getCar();\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car, GraphFetch_Node15_Car_Impl> targetSetTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car input) -> \n    {\n        _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car src = input;\n        GraphFetch_Node15_Car_Impl result = new GraphFetch_Node15_Car_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"Person_car\");\n        try\n        {\n            result.setModel(src.getModel());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'model' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car [Person_car]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        return result;\n    };\n\n    public Stream<IGraphInstance> transformProperty(List<?> graphObjects)\n    {\n        Stream<IGraphInstance> propertyStream_0 = graphObjects.stream()\n                                                              .map(_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl.class::cast)\n                                                              .filter((_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl graphObject) -> graphObject != null)\n                                                              .filter((_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl graphObject) -> graphObject.getSetId$() == \"Person\")\n                                                              .flatMap((_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl graphObject) -> Execute.propertyMappingTransformer_0\n                                                                                                                                                          .apply((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person) graphObject.getSrc$())\n                                                                                                                                                          .stream()\n                                                                                                                                                          .map((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car targetSrc) -> Execute.targetSetTransformer_0\n                                                                                                                                                                                                                                                                             .apply(targetSrc))\n                                                                                                                                                          .filter((GraphFetch_Node15_Car_Impl $x) -> $x != null)\n                                                                                                                                                          .map((GraphFetch_Node15_Car_Impl targetGraphObject) ->\n        {\n            graphObject.addCar(targetGraphObject);\n            targetGraphObject.addPerson(graphObject);\n            return new IGraphInstance<GraphFetch_Node15_Car_Impl>()\n            {\n                public GraphFetch_Node15_Car_Impl getValue()\n                {\n                    return targetGraphObject;\n                }\n                public long instanceSize()\n                {\n                    return targetGraphObject.getInstanceSize$();\n                }\n            };\n        }).filter((IGraphInstance $x) -> $x != null));\n        return Stream.of(propertyStream_0).flatMap((Stream<IGraphInstance> x) -> x);\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild1",
        "name": "GraphFetch_Node15_Car_Impl",
        "source": "package _pure.plan.root.n1.localGraph.localChild1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node15_Car_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>, java.io.Serializable\n{\n    private String model;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person person;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer manufacturer;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 2020994004L;\n\n    public String getModel()\n    {\n        return this.model;\n    }\n\n    public void setModel(String model)\n    {\n        this.model = model;\n    }\n\n    public void addModel(String object)\n    {\n        if ((Object) this.model != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'model' of multiplicity with bound 1\");\n        }\n        this.model = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person getPerson()\n    {\n        return this.person;\n    }\n\n    public void setPerson(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person person)\n    {\n        this.person = person;\n    }\n\n    public void addPerson(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person object)\n    {\n        if ((Object) this.person != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'person' of multiplicity with bound 1\");\n        }\n        this.person = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer getManufacturer()\n    {\n        return this.manufacturer;\n    }\n\n    public void setManufacturer(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer manufacturer)\n    {\n        this.manufacturer = manufacturer;\n    }\n\n    public void addManufacturer(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer object)\n    {\n        if ((Object) this.manufacturer != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'manufacturer' of multiplicity with bound 1\");\n        }\n        this.manufacturer = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> toChecked(Object source,\n                                                                                                                                                                                    boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car getValue() { return GraphFetch_Node15_Car_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getManufacturer() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer>) this.getManufacturer())\n                                                                                                                                                                                                                .allConstraints(context)\n                                                                                                                                                                                                                .stream()\n                                                                                                                                                                                                                .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                                     org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"manufacturer\")))\n                                                                                                                                                                                                                .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                                .collect(Collectors.toList()));\n            }\n            if (this.getPerson() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person>) this.getPerson())\n                                                                                                                                                                                                          .allConstraints(context)\n                                                                                                                                                                                                          .stream()\n                                                                                                                                                                                                          .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                               org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"person\")))\n                                                                                                                                                                                                          .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                          .collect(Collectors.toList()));\n            }\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 156L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node15_Car_Impl.getClassSize$();\n        if (this.model != null)\n        {\n            size = size + this.model.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild1.localChild0",
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.localChild1.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReadingExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryPropertyGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IInMemoryPropertyGraphFetchExecutionNodeSpecifics\n{\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car, _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer> propertyMappingTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car src) -> src.getManufacturer();\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer, GraphFetch_Node17_Manufacturer_Impl> targetSetTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer input) -> \n    {\n        _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer src = input;\n        GraphFetch_Node17_Manufacturer_Impl result = new GraphFetch_Node17_Manufacturer_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"Person_car_manufacturer\");\n        try\n        {\n            result.setName(src.getName());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'name' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer [Person_car_manufacturer]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        return result;\n    };\n\n    public Stream<IGraphInstance> transformProperty(List<?> graphObjects)\n    {\n        Stream<IGraphInstance> propertyStream_0 = graphObjects.stream()\n                                                              .map(_pure.plan.root.n1.localGraph.localChild1.GraphFetch_Node15_Car_Impl.class::cast)\n                                                              .filter((_pure.plan.root.n1.localGraph.localChild1.GraphFetch_Node15_Car_Impl graphObject) -> graphObject != null)\n                                                              .filter((_pure.plan.root.n1.localGraph.localChild1.GraphFetch_Node15_Car_Impl graphObject) -> graphObject.getSetId$() == \"Person_car\")\n                                                              .flatMap((_pure.plan.root.n1.localGraph.localChild1.GraphFetch_Node15_Car_Impl graphObject) -> Optional.ofNullable(Execute.propertyMappingTransformer_0\n                                                                                                                                                                                        .apply((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car) graphObject.getSrc$()))\n                                                                                                                                                                     .map(Stream::of)\n                                                                                                                                                                     .orElseGet(Stream::empty)\n                                                                                                                                                                     .map((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer targetSrc) -> Execute.targetSetTransformer_0\n                                                                                                                                                                                                                                                                                                 .apply(targetSrc))\n                                                                                                                                                                     .filter((GraphFetch_Node17_Manufacturer_Impl $x) -> $x != null)\n                                                                                                                                                                     .map((GraphFetch_Node17_Manufacturer_Impl targetGraphObject) ->\n        {\n            graphObject.addManufacturer(targetGraphObject);\n            targetGraphObject.addCar(graphObject);\n            return new IGraphInstance<GraphFetch_Node17_Manufacturer_Impl>()\n            {\n                public GraphFetch_Node17_Manufacturer_Impl getValue()\n                {\n                    return targetGraphObject;\n                }\n                public long instanceSize()\n                {\n                    return targetGraphObject.getInstanceSize$();\n                }\n            };\n        }).filter((IGraphInstance $x) -> $x != null));\n        return Stream.of(propertyStream_0).flatMap((Stream<IGraphInstance> x) -> x);\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild1.localChild0",
        "name": "GraphFetch_Node17_Manufacturer_Impl",
        "source": "package _pure.plan.root.n1.localGraph.localChild1.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node17_Manufacturer_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer>, java.io.Serializable\n{\n    private String name;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car car;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country country;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 676121901L;\n\n    public String getName()\n    {\n        return this.name;\n    }\n\n    public void setName(String name)\n    {\n        this.name = name;\n    }\n\n    public void addName(String object)\n    {\n        if ((Object) this.name != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'name' of multiplicity with bound 1\");\n        }\n        this.name = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car getCar()\n    {\n        return this.car;\n    }\n\n    public void setCar(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car car)\n    {\n        this.car = car;\n    }\n\n    public void addCar(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car object)\n    {\n        if ((Object) this.car != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'car' of multiplicity with bound 1\");\n        }\n        this.car = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country getCountry()\n    {\n        return this.country;\n    }\n\n    public void setCountry(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country country)\n    {\n        this.country = country;\n    }\n\n    public void addCountry(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country object)\n    {\n        if ((Object) this.country != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'country' of multiplicity with bound 1\");\n        }\n        this.country = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer> toChecked(Object source,\n                                                                                                                                                                                             boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer getValue() { return GraphFetch_Node17_Manufacturer_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getCar() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>) this.getCar())\n                                                                                                                                                                                                       .allConstraints(context)\n                                                                                                                                                                                                       .stream()\n                                                                                                                                                                                                       .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                            org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"car\")))\n                                                                                                                                                                                                       .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                       .collect(Collectors.toList()));\n            }\n            if (this.getCountry() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>) this.getCountry())\n                                                                                                                                                                                                           .allConstraints(context)\n                                                                                                                                                                                                           .stream()\n                                                                                                                                                                                                           .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                                org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"country\")))\n                                                                                                                                                                                                           .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                           .collect(Collectors.toList()));\n            }\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 156L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node17_Manufacturer_Impl.getClassSize$();\n        if (this.name != null)\n        {\n            size = size + this.name.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild1.localChild0.localChild0",
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.localChild1.localChild0.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReadingExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryPropertyGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IInMemoryPropertyGraphFetchExecutionNodeSpecifics\n{\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer, _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> propertyMappingTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer src) -> src.getCountry();\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country, GraphFetch_Node19_Country_Impl> targetSetTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country input) -> \n    {\n        _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country src = input;\n        GraphFetch_Node19_Country_Impl result = new GraphFetch_Node19_Country_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"Person_car_manufacturer_country\");\n        try\n        {\n            result.setCountryCode(src.getCountryCode());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'countryCode' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country [Person_car_manufacturer_country]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setContinent(src.getContinent());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'continent' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country [Person_car_manufacturer_country]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        return result;\n    };\n\n    public Stream<IGraphInstance> transformProperty(List<?> graphObjects)\n    {\n        Stream<IGraphInstance> propertyStream_0 = graphObjects.stream()\n                                                              .map(_pure.plan.root.n1.localGraph.localChild1.localChild0.GraphFetch_Node17_Manufacturer_Impl.class::cast)\n                                                              .filter((_pure.plan.root.n1.localGraph.localChild1.localChild0.GraphFetch_Node17_Manufacturer_Impl graphObject) -> graphObject != null)\n                                                              .filter((_pure.plan.root.n1.localGraph.localChild1.localChild0.GraphFetch_Node17_Manufacturer_Impl graphObject) -> graphObject.getSetId$() == \"Person_car_manufacturer\")\n                                                              .flatMap((_pure.plan.root.n1.localGraph.localChild1.localChild0.GraphFetch_Node17_Manufacturer_Impl graphObject) -> Optional.ofNullable(Execute.propertyMappingTransformer_0\n                                                                                                                                                                                                             .apply((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer) graphObject.getSrc$()))\n                                                                                                                                                                                          .map(Stream::of)\n                                                                                                                                                                                          .orElseGet(Stream::empty)\n                                                                                                                                                                                          .map((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country targetSrc) -> Execute.targetSetTransformer_0\n                                                                                                                                                                                                                                                                                                                 .apply(targetSrc))\n                                                                                                                                                                                          .filter((GraphFetch_Node19_Country_Impl $x) -> $x != null)\n                                                                                                                                                                                          .map((GraphFetch_Node19_Country_Impl targetGraphObject) ->\n        {\n            graphObject.addCountry(targetGraphObject);\n            targetGraphObject.addManufacturer(graphObject);\n            return new IGraphInstance<GraphFetch_Node19_Country_Impl>()\n            {\n                public GraphFetch_Node19_Country_Impl getValue()\n                {\n                    return targetGraphObject;\n                }\n                public long instanceSize()\n                {\n                    return targetGraphObject.getInstanceSize$();\n                }\n            };\n        }).filter((IGraphInstance $x) -> $x != null));\n        return Stream.of(propertyStream_0).flatMap((Stream<IGraphInstance> x) -> x);\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild1.localChild0.localChild0",
        "name": "GraphFetch_Node19_Country_Impl",
        "source": "package _pure.plan.root.n1.localGraph.localChild1.localChild0.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node19_Country_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>, java.io.Serializable\n{\n    private String continent;\n    private String countryCode;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer manufacturer;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 360326520L;\n\n    public String getContinent()\n    {\n        return this.continent;\n    }\n\n    public void setContinent(String continent)\n    {\n        this.continent = continent;\n    }\n\n    public void addContinent(String object)\n    {\n        if ((Object) this.continent != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'continent' of multiplicity with bound 1\");\n        }\n        this.continent = object;\n    }\n\n    public String getCountryCode()\n    {\n        return this.countryCode;\n    }\n\n    public void setCountryCode(String countryCode)\n    {\n        this.countryCode = countryCode;\n    }\n\n    public void addCountryCode(String object)\n    {\n        if ((Object) this.countryCode != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'countryCode' of multiplicity with bound 1\");\n        }\n        this.countryCode = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer getManufacturer()\n    {\n        return this.manufacturer;\n    }\n\n    public void setManufacturer(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer manufacturer)\n    {\n        this.manufacturer = manufacturer;\n    }\n\n    public void addManufacturer(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer object)\n    {\n        if ((Object) this.manufacturer != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'manufacturer' of multiplicity with bound 1\");\n        }\n        this.manufacturer = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked(Object source,\n                                                                                                                                                                                        boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country getValue() { return GraphFetch_Node19_Country_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getManufacturer() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer>) this.getManufacturer())\n                                                                                                                                                                                                                .allConstraints(context)\n                                                                                                                                                                                                                .stream()\n                                                                                                                                                                                                                .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                                     org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"manufacturer\")))\n                                                                                                                                                                                                                .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                                .collect(Collectors.toList()));\n            }\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 156L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node19_Country_Impl.getClassSize$();\n        if (this.continent != null)\n        {\n            size = size + this.continent.length();\n        }\n        if (this.countryCode != null)\n        {\n            size = size + this.countryCode.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild2",
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.localChild2;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReadingExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryPropertyGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IInMemoryPropertyGraphFetchExecutionNodeSpecifics\n{\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person, _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm> propertyMappingTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person src) -> src.getFirm();\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm, GraphFetch_Node22_Firm_Impl> targetSetTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm input) -> \n    {\n        _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm src = input;\n        GraphFetch_Node22_Firm_Impl result = new GraphFetch_Node22_Firm_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"Person_firm\");\n        try\n        {\n            result.setLegalName(src.getLegalName());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'legalName' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm [Person_firm]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setDateFounded(src.getDateFounded());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'dateFounded' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm [Person_firm]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setIndustrySectors(src.getIndustrySectors());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'industrySectors' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm [Person_firm]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        return result;\n    };\n\n    public Stream<IGraphInstance> transformProperty(List<?> graphObjects)\n    {\n        Stream<IGraphInstance> propertyStream_0 = graphObjects.stream()\n                                                              .map(_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl.class::cast)\n                                                              .filter((_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl graphObject) -> graphObject != null)\n                                                              .filter((_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl graphObject) -> graphObject.getSetId$() == \"Person\")\n                                                              .flatMap((_pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl graphObject) -> Optional.ofNullable(Execute.propertyMappingTransformer_0\n                                                                                                                                                                              .apply((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person) graphObject.getSrc$()))\n                                                                                                                                                           .map(Stream::of)\n                                                                                                                                                           .orElseGet(Stream::empty)\n                                                                                                                                                           .map((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm targetSrc) -> Execute.targetSetTransformer_0\n                                                                                                                                                                                                                                                                               .apply(targetSrc))\n                                                                                                                                                           .filter((GraphFetch_Node22_Firm_Impl $x) -> $x != null)\n                                                                                                                                                           .map((GraphFetch_Node22_Firm_Impl targetGraphObject) ->\n        {\n            graphObject.addFirm(targetGraphObject);\n            targetGraphObject.addPerson(graphObject);\n            return new IGraphInstance<GraphFetch_Node22_Firm_Impl>()\n            {\n                public GraphFetch_Node22_Firm_Impl getValue()\n                {\n                    return targetGraphObject;\n                }\n                public long instanceSize()\n                {\n                    return targetGraphObject.getInstanceSize$();\n                }\n            };\n        }).filter((IGraphInstance $x) -> $x != null));\n        return Stream.of(propertyStream_0).flatMap((Stream<IGraphInstance> x) -> x);\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild2",
        "name": "GraphFetch_Node22_Firm_Impl",
        "source": "package _pure.plan.root.n1.localGraph.localChild2;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node22_Firm_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm>, java.io.Serializable\n{\n    private String legalName;\n    private PureDate dateFounded;\n    private List<String> industrySectors;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address address;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person person;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 1318859841L;\n\n    public String getLegalName()\n    {\n        return this.legalName;\n    }\n\n    public void setLegalName(String legalName)\n    {\n        this.legalName = legalName;\n    }\n\n    public void addLegalName(String object)\n    {\n        if ((Object) this.legalName != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'legalName' of multiplicity with bound 1\");\n        }\n        this.legalName = object;\n    }\n\n    public PureDate getDateFounded()\n    {\n        return this.dateFounded;\n    }\n\n    public void setDateFounded(PureDate dateFounded)\n    {\n        this.dateFounded = dateFounded;\n    }\n\n    public void addDateFounded(PureDate object)\n    {\n        if ((Object) this.dateFounded != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'dateFounded' of multiplicity with bound 1\");\n        }\n        this.dateFounded = object;\n    }\n\n    public List<String> getIndustrySectors()\n    {\n        return this.industrySectors == null\n                   ? Collections.<String>emptyList()\n                   : this.industrySectors;\n    }\n\n    public void setIndustrySectors(List<String> industrySectors)\n    {\n        this.industrySectors = industrySectors;\n    }\n\n    public void addIndustrySectors(String object)\n    {\n        if (this.industrySectors == null)\n        {\n            this.industrySectors = new ArrayList<String>();\n        }\n        this.industrySectors.add(object);\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address getAddress()\n    {\n        return this.address;\n    }\n\n    public void setAddress(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address address)\n    {\n        this.address = address;\n    }\n\n    public void addAddress(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address object)\n    {\n        if ((Object) this.address != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'address' of multiplicity with bound 1\");\n        }\n        this.address = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person getPerson()\n    {\n        return this.person;\n    }\n\n    public void setPerson(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person person)\n    {\n        this.person = person;\n    }\n\n    public void addPerson(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person object)\n    {\n        if ((Object) this.person != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'person' of multiplicity with bound 1\");\n        }\n        this.person = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm> toChecked(Object source,\n                                                                                                                                                                                     boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm getValue() { return GraphFetch_Node22_Firm_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getAddress() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address>) this.getAddress())\n                                                                                                                                                                                                           .allConstraints(context)\n                                                                                                                                                                                                           .stream()\n                                                                                                                                                                                                           .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                                org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"address\")))\n                                                                                                                                                                                                           .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                           .collect(Collectors.toList()));\n            }\n            if (this.getPerson() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person>) this.getPerson())\n                                                                                                                                                                                                          .allConstraints(context)\n                                                                                                                                                                                                          .stream()\n                                                                                                                                                                                                          .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                               org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"person\")))\n                                                                                                                                                                                                          .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                          .collect(Collectors.toList()));\n            }\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 244L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node22_Firm_Impl.getClassSize$();\n        if (this.legalName != null)\n        {\n            size = size + this.legalName.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        if (this.industrySectors != null)\n        {\n            for (String i: this.industrySectors)\n            {\n                if (i != null)\n                {\n                    size = size + 20L;\n                    size = size + i.length();\n                }\n            }\n        }\n        return size;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild2.localChild0",
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.localChild2.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReadingExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryPropertyGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IInMemoryPropertyGraphFetchExecutionNodeSpecifics\n{\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm, _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> propertyMappingTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm src) -> src.getAddress();\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address, GraphFetch_Node26_Address_Impl> targetSetTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address input) -> \n    {\n        _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address src = input;\n        GraphFetch_Node26_Address_Impl result = new GraphFetch_Node26_Address_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"Person_firm_address\");\n        try\n        {\n            result.setStreet(src.getStreet());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'street' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address [Person_firm_address]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setPostalCode(src.getPostalCode());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'postalCode' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address [Person_firm_address]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        return result;\n    };\n\n    public Stream<IGraphInstance> transformProperty(List<?> graphObjects)\n    {\n        Stream<IGraphInstance> propertyStream_0 = graphObjects.stream()\n                                                              .map(_pure.plan.root.n1.localGraph.localChild2.GraphFetch_Node22_Firm_Impl.class::cast)\n                                                              .filter((_pure.plan.root.n1.localGraph.localChild2.GraphFetch_Node22_Firm_Impl graphObject) -> graphObject != null)\n                                                              .filter((_pure.plan.root.n1.localGraph.localChild2.GraphFetch_Node22_Firm_Impl graphObject) -> graphObject.getSetId$() == \"Person_firm\")\n                                                              .flatMap((_pure.plan.root.n1.localGraph.localChild2.GraphFetch_Node22_Firm_Impl graphObject) -> Optional.ofNullable(Execute.propertyMappingTransformer_0\n                                                                                                                                                                                         .apply((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm) graphObject.getSrc$()))\n                                                                                                                                                                      .map(Stream::of)\n                                                                                                                                                                      .orElseGet(Stream::empty)\n                                                                                                                                                                      .map((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address targetSrc) -> Execute.targetSetTransformer_0\n                                                                                                                                                                                                                                                                                             .apply(targetSrc))\n                                                                                                                                                                      .filter((GraphFetch_Node26_Address_Impl $x) -> $x != null)\n                                                                                                                                                                      .map((GraphFetch_Node26_Address_Impl targetGraphObject) ->\n        {\n            graphObject.addAddress(targetGraphObject);\n            return new IGraphInstance<GraphFetch_Node26_Address_Impl>()\n            {\n                public GraphFetch_Node26_Address_Impl getValue()\n                {\n                    return targetGraphObject;\n                }\n                public long instanceSize()\n                {\n                    return targetGraphObject.getInstanceSize$();\n                }\n            };\n        }).filter((IGraphInstance $x) -> $x != null));\n        return Stream.of(propertyStream_0).flatMap((Stream<IGraphInstance> x) -> x);\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild2.localChild0",
        "name": "GraphFetch_Node26_Address_Impl",
        "source": "package _pure.plan.root.n1.localGraph.localChild2.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node26_Address_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address>, java.io.Serializable\n{\n    private String street;\n    private String city;\n    private String postalCode;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country country;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 2132158185L;\n\n    public String getStreet()\n    {\n        return this.street;\n    }\n\n    public void setStreet(String street)\n    {\n        this.street = street;\n    }\n\n    public void addStreet(String object)\n    {\n        if ((Object) this.street != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'street' of multiplicity with bound 1\");\n        }\n        this.street = object;\n    }\n\n    public String getCity()\n    {\n        return this.city;\n    }\n\n    public void setCity(String city)\n    {\n        this.city = city;\n    }\n\n    public void addCity(String object)\n    {\n        if ((Object) this.city != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'city' of multiplicity with bound 1\");\n        }\n        this.city = object;\n    }\n\n    public String getPostalCode()\n    {\n        return this.postalCode;\n    }\n\n    public void setPostalCode(String postalCode)\n    {\n        this.postalCode = postalCode;\n    }\n\n    public void addPostalCode(String object)\n    {\n        if ((Object) this.postalCode != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'postalCode' of multiplicity with bound 1\");\n        }\n        this.postalCode = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country getCountry()\n    {\n        return this.country;\n    }\n\n    public void setCountry(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country country)\n    {\n        this.country = country;\n    }\n\n    public void addCountry(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country object)\n    {\n        if ((Object) this.country != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'country' of multiplicity with bound 1\");\n        }\n        this.country = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> toChecked(Object source,\n                                                                                                                                                                                        boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address getValue() { return GraphFetch_Node26_Address_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getCountry() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>) this.getCountry())\n                                                                                                                                                                                                           .allConstraints(context)\n                                                                                                                                                                                                           .stream()\n                                                                                                                                                                                                           .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                                org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"country\")))\n                                                                                                                                                                                                           .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                           .collect(Collectors.toList()));\n            }\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 180L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node26_Address_Impl.getClassSize$();\n        if (this.street != null)\n        {\n            size = size + this.street.length();\n        }\n        if (this.city != null)\n        {\n            size = size + this.city.length();\n        }\n        if (this.postalCode != null)\n        {\n            size = size + this.postalCode.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild2.localChild0.localChild0",
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.localChild2.localChild0.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReadingExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.graphFetch.IInMemoryPropertyGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class Execute implements IInMemoryPropertyGraphFetchExecutionNodeSpecifics\n{\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address, _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> propertyMappingTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address src) -> src.getCountry();\n    private static final Function<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country, GraphFetch_Node29_Country_Impl> targetSetTransformer_0 = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country input) -> \n    {\n        _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country src = input;\n        GraphFetch_Node29_Country_Impl result = new GraphFetch_Node29_Country_Impl();\n        result.setSrc$(src);\n        result.setSetId$(\"Person_firm_address_country\");\n        try\n        {\n            result.setCountryCode(src.getCountryCode());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'countryCode' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country [Person_firm_address_country]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        try\n        {\n            result.setContinent(src.getContinent());\n        }\n        catch (RuntimeException e)\n        {\n            throw new RuntimeException(\"Error instantiating property 'continent' on Target class 'meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country [Person_firm_address_country]' on Mapping 'test::mongodb::TestPersonMapping'.\\n\" + e.getMessage());\n        }\n        return result;\n    };\n\n    public Stream<IGraphInstance> transformProperty(List<?> graphObjects)\n    {\n        Stream<IGraphInstance> propertyStream_0 = graphObjects.stream()\n                                                              .map(_pure.plan.root.n1.localGraph.localChild2.localChild0.GraphFetch_Node26_Address_Impl.class::cast)\n                                                              .filter((_pure.plan.root.n1.localGraph.localChild2.localChild0.GraphFetch_Node26_Address_Impl graphObject) -> graphObject != null)\n                                                              .filter((_pure.plan.root.n1.localGraph.localChild2.localChild0.GraphFetch_Node26_Address_Impl graphObject) -> graphObject.getSetId$() == \"Person_firm_address\")\n                                                              .flatMap((_pure.plan.root.n1.localGraph.localChild2.localChild0.GraphFetch_Node26_Address_Impl graphObject) -> Optional.ofNullable(Execute.propertyMappingTransformer_0\n                                                                                                                                                                                                        .apply((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address) graphObject.getSrc$()))\n                                                                                                                                                                                     .map(Stream::of)\n                                                                                                                                                                                     .orElseGet(Stream::empty)\n                                                                                                                                                                                     .map((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country targetSrc) -> Execute.targetSetTransformer_0\n                                                                                                                                                                                                                                                                                                            .apply(targetSrc))\n                                                                                                                                                                                     .filter((GraphFetch_Node29_Country_Impl $x) -> $x != null)\n                                                                                                                                                                                     .map((GraphFetch_Node29_Country_Impl targetGraphObject) ->\n        {\n            graphObject.addCountry(targetGraphObject);\n            return new IGraphInstance<GraphFetch_Node29_Country_Impl>()\n            {\n                public GraphFetch_Node29_Country_Impl getValue()\n                {\n                    return targetGraphObject;\n                }\n                public long instanceSize()\n                {\n                    return targetGraphObject.getInstanceSize$();\n                }\n            };\n        }).filter((IGraphInstance $x) -> $x != null));\n        return Stream.of(propertyStream_0).flatMap((Stream<IGraphInstance> x) -> x);\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.localChild2.localChild0.localChild0",
        "name": "GraphFetch_Node29_Country_Impl",
        "source": "package _pure.plan.root.n1.localGraph.localChild2.localChild0.localChild0;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\n\npublic class GraphFetch_Node29_Country_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>, java.io.Serializable\n{\n    private String continent;\n    private String countryCode;\n    private _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer manufacturer;\n    private String setId$;\n    private Object src$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 632353049L;\n\n    public String getContinent()\n    {\n        return this.continent;\n    }\n\n    public void setContinent(String continent)\n    {\n        this.continent = continent;\n    }\n\n    public void addContinent(String object)\n    {\n        if ((Object) this.continent != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'continent' of multiplicity with bound 1\");\n        }\n        this.continent = object;\n    }\n\n    public String getCountryCode()\n    {\n        return this.countryCode;\n    }\n\n    public void setCountryCode(String countryCode)\n    {\n        this.countryCode = countryCode;\n    }\n\n    public void addCountryCode(String object)\n    {\n        if ((Object) this.countryCode != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'countryCode' of multiplicity with bound 1\");\n        }\n        this.countryCode = object;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer getManufacturer()\n    {\n        return this.manufacturer;\n    }\n\n    public void setManufacturer(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer manufacturer)\n    {\n        this.manufacturer = manufacturer;\n    }\n\n    public void addManufacturer(_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer object)\n    {\n        if ((Object) this.manufacturer != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'manufacturer' of multiplicity with bound 1\");\n        }\n        this.manufacturer = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> toChecked(Object source,\n                                                                                                                                                                                        boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country getValue() { return GraphFetch_Node29_Country_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n            if (this.getManufacturer() != null)\n            {\n                result.addAll(((org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer>) this.getManufacturer())\n                                                                                                                                                                                                                .allConstraints(context)\n                                                                                                                                                                                                                .stream()\n                                                                                                                                                                                                                .map((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect d) -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d,\n                                                                                                                                                                                                                                                                                                                                                                                     org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"manufacturer\")))\n                                                                                                                                                                                                                .filter((org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect $x) -> $x != null)\n                                                                                                                                                                                                                .collect(Collectors.toList()));\n            }\n        }\n        return result;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId$)\n    {\n        this.setId$ = setId$;\n    }\n\n    public Object getSrc$()\n    {\n        return this.src$;\n    }\n\n    public void setSrc$(Object src$)\n    {\n        this.src$ = src$;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String alloyStoreObjectReference$)\n    {\n        this.alloyStoreObjectReference$ = alloyStoreObjectReference$;\n    }\n\n    private static long getClassSize$()\n    {\n        return 156L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node29_Country_Impl.getClassSize$();\n        if (this.continent != null)\n        {\n            size = size + this.continent.length();\n        }\n        if (this.countryCode != null)\n        {\n            size = size + this.countryCode.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.n1",
        "name": "Execute",
        "source": "package _pure.plan.root.n1.localGraph.n1;\n\nimport com.mongodb.client.MongoCursor;\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReader;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.execution.stores.mongodb.result.MongoDBResult;\nimport org.finos.legend.engine.plan.execution.stores.mongodb.specifics.IMongoDocumentDeserializeExecutionNodeSpecifics;\n\npublic class Execute implements IMongoDocumentDeserializeExecutionNodeSpecifics\n{\n    public IStoreStreamReader streamReader(MongoDBResult mResult)\n    {\n        return new _pure.plan.root.n1.localGraph.n1.JsonDataReader_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person(mResult);\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.n1",
        "name": "JsonDataReader_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person",
        "source": "package _pure.plan.root.n1.localGraph.n1;\n\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address;\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car;\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country;\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm;\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer;\nimport _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.JsonNodeType;\nimport com.mongodb.client.MongoCursor;\nimport java.io.*;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.math.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.bson.Document;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.execution.stores.mongodb.result.MongoDBResult;\n\npublic class JsonDataReader_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person implements org.finos.legend.engine.plan.dependencies.store.inMemory.IStoreStreamReader\n{\n    private boolean finishedReading = false;\n    private Stack<Object> stack = new Stack<Object>();\n    private JsonParser parser;\n    private ObjectMapper objectMapper;\n    private boolean inArray = false;\n    private long recordCount = 0;\n    private InputStream in;\n    private MongoCursor<Document> mCursor;\n\n    JsonDataReader_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person(InputStream in)\n    {\n        this.in = in;\n    }\n\n    JsonDataReader_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person(MongoDBResult mongoResult)\n    {\n        this.mCursor = mongoResult.getMongoCursor();\n    }\n\n    private boolean readMethodExists(String name)\n    {\n        Method[] methods = this.getClass().getDeclaredMethods();\n        for (int i = 0; i < methods.length; i++) {\n           if (methods[i].getName().equals(name)) return true;\n        };\n        return false;\n    }\n\n    private Object readMethodInvoke(String name, JsonNode node)\n    {\n        Method m = null;\n        try{\n           m = this.getClass().getMethod(name, JsonNode.class);\n        }\n        catch (NoSuchMethodException e){throw new RuntimeException(e.getMessage());}\n        try{\n           return m.invoke(this, node);\n        }\n        catch (IllegalAccessException e){throw new RuntimeException(e.getMessage());}catch (InvocationTargetException e){throw new RuntimeException(e.getMessage());}\n    }\n\n    public IChecked<Person> read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person(JsonNode node)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = new java.util.ArrayList<>();\n\n        if (!node.path(\"@type\").getNodeType().equals(JsonNodeType.MISSING)){\n         String nodeValue = node.path(\"@type\").textValue();\n\n         if (!nodeValue.equals(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")) {\n           String methodName = \"read_\" + nodeValue.replace(\"::\", \"_\");\n           if (readMethodExists(methodName)){\n              return (IChecked) readMethodInvoke(methodName, node);\n           }\n        }}\n        java.util.List<String> _firstName = new java.util.ArrayList<>();\n        java.util.List<String> _lastName = new java.util.ArrayList<>();\n        java.util.List<Long> _age = new java.util.ArrayList<>();\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.date.PureDate> _birthDate = new java.util.ArrayList<>();\n        java.util.List<String> _phoneNumber = new java.util.ArrayList<>();\n        java.util.List<String> _otherPhoneNumbers = new java.util.ArrayList<>();\n        java.util.List<String> _email = new java.util.ArrayList<>();\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> _address = new java.util.ArrayList<>();\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> _car = new java.util.ArrayList<>();\n        if (!this.stack.empty() && this.stack.peek() instanceof _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car)\n        {\n            _car.add((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car) this.stack.peek());\n        }\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm> _firm = new java.util.ArrayList<>();\n        if (!this.stack.empty() && this.stack.peek() instanceof _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm)\n        {\n            _firm.add((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm) this.stack.peek());\n        }\n\n        this.stack.push(new _pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl());\n\n        if (node.path(\"firstName\").getNodeType() != JsonNodeType.MISSING){\n        _firstName = acceptMany(node.path(\"firstName\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"firstName\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")));\n        }\n        if (node.path(\"lastName\").getNodeType() != JsonNodeType.MISSING){\n        _lastName = acceptMany(node.path(\"lastName\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"lastName\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")));\n        }\n        if (node.path(\"age\").getNodeType() != JsonNodeType.MISSING){\n        _age = acceptMany(node.path(\"age\"), this::acceptInteger,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"age\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")));\n        }\n        if (node.path(\"birthDate\").getNodeType() != JsonNodeType.MISSING){\n        _birthDate = acceptMany(node.path(\"birthDate\"), this::acceptDateTime,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"birthDate\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")));\n        }\n        if (node.path(\"phoneNumber\").getNodeType() != JsonNodeType.MISSING){\n        _phoneNumber = acceptMany(node.path(\"phoneNumber\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"phoneNumber\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")));\n        }\n        if (node.path(\"otherPhoneNumbers\").getNodeType() != JsonNodeType.MISSING){\n        _otherPhoneNumbers = acceptMany(node.path(\"otherPhoneNumbers\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"otherPhoneNumbers\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")));\n        }\n        if (node.path(\"email\").getNodeType() != JsonNodeType.MISSING){\n        _email = acceptMany(node.path(\"email\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"email\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")));\n        }\n        if (node.path(\"address\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address>> checked = acceptMany(node.path(\"address\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"address\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"address\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"address\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _address = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (node.path(\"car\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>> checked = acceptMany(node.path(\"car\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Car,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"car\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"car\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _car = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (node.path(\"firm\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm>> checked = acceptMany(node.path(\"firm\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"firm\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"firm\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"firm\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _firm = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (_firstName.size() > 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for firstName: expected [0..1] found [\" + _firstName.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\"));\n        }\n        if (_lastName.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for lastName: expected [1] found [\" + _lastName.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\"));\n        }\n        if (_age.size() > 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for age: expected [0..1] found [\" + _age.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\"));\n        }\n        if (_birthDate.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for birthDate: expected [1] found [\" + _birthDate.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\"));\n        }\n        if (_phoneNumber.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for phoneNumber: expected [1] found [\" + _phoneNumber.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\"));\n        }\n        if (_email.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for email: expected [1] found [\" + _email.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\"));\n        }\n        if (_address.size() > 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for address: expected [0..1] found [\" + _address.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\"));\n        }\n        if (_car.size() < 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for car: expected [1..*] found [\" + _car.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\"));\n        }\n        if (_firm.size() > 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for firm: expected [0..1] found [\" + _firm.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Person\"));\n        }\n\n        if (defects.stream().anyMatch(d -> d.getEnforcementLevel() == EnforcementLevel.Critical))\n        {\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person getValue() { return null; }\n        };\n        }\n        else\n        {\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl) this.stack.peek()).firstName = _firstName.isEmpty() ? null : _firstName.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl) this.stack.peek()).lastName = _lastName.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl) this.stack.peek()).age = _age.isEmpty() ? null : _age.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl) this.stack.peek()).birthDate = _birthDate.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl) this.stack.peek()).phoneNumber = _phoneNumber.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl) this.stack.peek()).otherPhoneNumbers = java.util.Collections.unmodifiableList(_otherPhoneNumbers);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl) this.stack.peek()).email = _email.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl) this.stack.peek()).address = _address.isEmpty() ? null : _address.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl) this.stack.peek()).car = java.util.Collections.unmodifiableList(_car);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl) this.stack.peek()).firm = _firm.isEmpty() ? null : _firm.get(0);\n            _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person value = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person) this.stack.pop();\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person getValue() { return value; }\n        };\n        }\n    }\n\n    public IChecked<Address> read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address(JsonNode node)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = new java.util.ArrayList<>();\n\n        if (!node.path(\"@type\").getNodeType().equals(JsonNodeType.MISSING)){\n         String nodeValue = node.path(\"@type\").textValue();\n\n         if (!nodeValue.equals(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\")) {\n           String methodName = \"read_\" + nodeValue.replace(\"::\", \"_\");\n           if (readMethodExists(methodName)){\n              return (IChecked) readMethodInvoke(methodName, node);\n           }\n        }}\n        java.util.List<String> _street = new java.util.ArrayList<>();\n        java.util.List<String> _city = new java.util.ArrayList<>();\n        java.util.List<String> _postalCode = new java.util.ArrayList<>();\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> _country = new java.util.ArrayList<>();\n\n        this.stack.push(new _pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address_Impl());\n\n        if (node.path(\"street\").getNodeType() != JsonNodeType.MISSING){\n        _street = acceptMany(node.path(\"street\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"street\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\")));\n        }\n        if (node.path(\"city\").getNodeType() != JsonNodeType.MISSING){\n        _city = acceptMany(node.path(\"city\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"city\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\")));\n        }\n        if (node.path(\"postalCode\").getNodeType() != JsonNodeType.MISSING){\n        _postalCode = acceptMany(node.path(\"postalCode\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"postalCode\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\")));\n        }\n        if (node.path(\"country\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>> checked = acceptMany(node.path(\"country\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Country,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"country\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"country\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"country\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _country = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (_street.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for street: expected [1] found [\" + _street.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\"));\n        }\n        if (_city.size() > 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for city: expected [0..1] found [\" + _city.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\"));\n        }\n        if (_postalCode.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for postalCode: expected [1] found [\" + _postalCode.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\"));\n        }\n        if (_country.size() > 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for country: expected [0..1] found [\" + _country.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Address\"));\n        }\n\n        if (defects.stream().anyMatch(d -> d.getEnforcementLevel() == EnforcementLevel.Critical))\n        {\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address getValue() { return null; }\n        };\n        }\n        else\n        {\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address_Impl) this.stack.peek()).street = _street.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address_Impl) this.stack.peek()).city = _city.isEmpty() ? null : _city.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address_Impl) this.stack.peek()).postalCode = _postalCode.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address_Impl) this.stack.peek()).country = _country.isEmpty() ? null : _country.get(0);\n            _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address value = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address) this.stack.pop();\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address getValue() { return value; }\n        };\n        }\n    }\n\n    public IChecked<Car> read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Car(JsonNode node)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = new java.util.ArrayList<>();\n\n        if (!node.path(\"@type\").getNodeType().equals(JsonNodeType.MISSING)){\n         String nodeValue = node.path(\"@type\").textValue();\n\n         if (!nodeValue.equals(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car\")) {\n           String methodName = \"read_\" + nodeValue.replace(\"::\", \"_\");\n           if (readMethodExists(methodName)){\n              return (IChecked) readMethodInvoke(methodName, node);\n           }\n        }}\n        java.util.List<String> _model = new java.util.ArrayList<>();\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person> _person = new java.util.ArrayList<>();\n        if (!this.stack.empty() && this.stack.peek() instanceof _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person)\n        {\n            _person.add((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person) this.stack.peek());\n        }\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer> _manufacturer = new java.util.ArrayList<>();\n        if (!this.stack.empty() && this.stack.peek() instanceof _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer)\n        {\n            _manufacturer.add((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer) this.stack.peek());\n        }\n\n        this.stack.push(new _pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Car_Impl());\n\n        if (node.path(\"model\").getNodeType() != JsonNodeType.MISSING){\n        _model = acceptMany(node.path(\"model\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"model\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car\")));\n        }\n        if (node.path(\"person\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person>> checked = acceptMany(node.path(\"person\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"person\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"person\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"person\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _person = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (node.path(\"manufacturer\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer>> checked = acceptMany(node.path(\"manufacturer\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Manufacturer,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"manufacturer\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"manufacturer\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"manufacturer\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _manufacturer = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (_model.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for model: expected [1] found [\" + _model.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car\"));\n        }\n        if (_person.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for person: expected [1] found [\" + _person.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car\"));\n        }\n        if (_manufacturer.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for manufacturer: expected [1] found [\" + _manufacturer.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Car\"));\n        }\n\n        if (defects.stream().anyMatch(d -> d.getEnforcementLevel() == EnforcementLevel.Critical))\n        {\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car getValue() { return null; }\n        };\n        }\n        else\n        {\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Car_Impl) this.stack.peek()).model = _model.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Car_Impl) this.stack.peek()).person = _person.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Car_Impl) this.stack.peek()).manufacturer = _manufacturer.get(0);\n            _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car value = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car) this.stack.pop();\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car getValue() { return value; }\n        };\n        }\n    }\n\n    public IChecked<Firm> read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm(JsonNode node)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = new java.util.ArrayList<>();\n\n        if (!node.path(\"@type\").getNodeType().equals(JsonNodeType.MISSING)){\n         String nodeValue = node.path(\"@type\").textValue();\n\n         if (!nodeValue.equals(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\")) {\n           String methodName = \"read_\" + nodeValue.replace(\"::\", \"_\");\n           if (readMethodExists(methodName)){\n              return (IChecked) readMethodInvoke(methodName, node);\n           }\n        }}\n        java.util.List<String> _legalName = new java.util.ArrayList<>();\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.date.PureDate> _dateFounded = new java.util.ArrayList<>();\n        java.util.List<String> _industrySectors = new java.util.ArrayList<>();\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address> _address = new java.util.ArrayList<>();\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person> _person = new java.util.ArrayList<>();\n        if (!this.stack.empty() && this.stack.peek() instanceof _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person)\n        {\n            _person.add((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person) this.stack.peek());\n        }\n\n        this.stack.push(new _pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm_Impl());\n\n        if (node.path(\"legalName\").getNodeType() != JsonNodeType.MISSING){\n        _legalName = acceptMany(node.path(\"legalName\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"legalName\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\")));\n        }\n        if (node.path(\"dateFounded\").getNodeType() != JsonNodeType.MISSING){\n        _dateFounded = acceptMany(node.path(\"dateFounded\"), this::acceptDateTime,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"dateFounded\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\")));\n        }\n        if (node.path(\"industrySectors\").getNodeType() != JsonNodeType.MISSING){\n        _industrySectors = acceptMany(node.path(\"industrySectors\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"industrySectors\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\")));\n        }\n        if (node.path(\"address\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address>> checked = acceptMany(node.path(\"address\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"address\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"address\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"address\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _address = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (node.path(\"person\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person>> checked = acceptMany(node.path(\"person\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"person\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"person\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"person\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _person = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (_legalName.size() > 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for legalName: expected [0..1] found [\" + _legalName.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\"));\n        }\n        if (_dateFounded.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for dateFounded: expected [1] found [\" + _dateFounded.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\"));\n        }\n        if (_address.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for address: expected [1] found [\" + _address.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\"));\n        }\n        if (_person.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for person: expected [1] found [\" + _person.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Firm\"));\n        }\n\n        if (defects.stream().anyMatch(d -> d.getEnforcementLevel() == EnforcementLevel.Critical))\n        {\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm getValue() { return null; }\n        };\n        }\n        else\n        {\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm_Impl) this.stack.peek()).legalName = _legalName.isEmpty() ? null : _legalName.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm_Impl) this.stack.peek()).dateFounded = _dateFounded.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm_Impl) this.stack.peek()).industrySectors = java.util.Collections.unmodifiableList(_industrySectors);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm_Impl) this.stack.peek()).address = _address.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm_Impl) this.stack.peek()).person = _person.get(0);\n            _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm value = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm) this.stack.pop();\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm getValue() { return value; }\n        };\n        }\n    }\n\n    public IChecked<Country> read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Country(JsonNode node)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = new java.util.ArrayList<>();\n\n        if (!node.path(\"@type\").getNodeType().equals(JsonNodeType.MISSING)){\n         String nodeValue = node.path(\"@type\").textValue();\n\n         if (!nodeValue.equals(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\")) {\n           String methodName = \"read_\" + nodeValue.replace(\"::\", \"_\");\n           if (readMethodExists(methodName)){\n              return (IChecked) readMethodInvoke(methodName, node);\n           }\n        }}\n        java.util.List<String> _continent = new java.util.ArrayList<>();\n        java.util.List<String> _countryCode = new java.util.ArrayList<>();\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer> _manufacturer = new java.util.ArrayList<>();\n        if (!this.stack.empty() && this.stack.peek() instanceof _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer)\n        {\n            _manufacturer.add((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer) this.stack.peek());\n        }\n\n        this.stack.push(new _pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Country_Impl());\n\n        if (node.path(\"continent\").getNodeType() != JsonNodeType.MISSING){\n        _continent = acceptMany(node.path(\"continent\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"continent\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\")));\n        }\n        if (node.path(\"countryCode\").getNodeType() != JsonNodeType.MISSING){\n        _countryCode = acceptMany(node.path(\"countryCode\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"countryCode\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\")));\n        }\n        if (node.path(\"manufacturer\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer>> checked = acceptMany(node.path(\"manufacturer\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Manufacturer,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"manufacturer\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"manufacturer\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"manufacturer\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _manufacturer = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (_continent.size() > 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for continent: expected [0..1] found [\" + _continent.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\"));\n        }\n        if (_countryCode.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for countryCode: expected [1] found [\" + _countryCode.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\"));\n        }\n        if (_manufacturer.size() > 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for manufacturer: expected [0..1] found [\" + _manufacturer.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Country\"));\n        }\n\n        if (defects.stream().anyMatch(d -> d.getEnforcementLevel() == EnforcementLevel.Critical))\n        {\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country getValue() { return null; }\n        };\n        }\n        else\n        {\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Country_Impl) this.stack.peek()).continent = _continent.isEmpty() ? null : _continent.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Country_Impl) this.stack.peek()).countryCode = _countryCode.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Country_Impl) this.stack.peek()).manufacturer = _manufacturer.isEmpty() ? null : _manufacturer.get(0);\n            _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country value = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country) this.stack.pop();\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country getValue() { return value; }\n        };\n        }\n    }\n\n    public IChecked<Manufacturer> read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Manufacturer(JsonNode node)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = new java.util.ArrayList<>();\n\n        if (!node.path(\"@type\").getNodeType().equals(JsonNodeType.MISSING)){\n         String nodeValue = node.path(\"@type\").textValue();\n\n         if (!nodeValue.equals(\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer\")) {\n           String methodName = \"read_\" + nodeValue.replace(\"::\", \"_\");\n           if (readMethodExists(methodName)){\n              return (IChecked) readMethodInvoke(methodName, node);\n           }\n        }}\n        java.util.List<String> _name = new java.util.ArrayList<>();\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> _car = new java.util.ArrayList<>();\n        if (!this.stack.empty() && this.stack.peek() instanceof _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car)\n        {\n            _car.add((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car) this.stack.peek());\n        }\n        java.util.List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country> _country = new java.util.ArrayList<>();\n        if (!this.stack.empty() && this.stack.peek() instanceof _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country)\n        {\n            _country.add((_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country) this.stack.peek());\n        }\n\n        this.stack.push(new _pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Manufacturer_Impl());\n\n        if (node.path(\"name\").getNodeType() != JsonNodeType.MISSING){\n        _name = acceptMany(node.path(\"name\"), this::acceptString,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"name\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer\")));\n        }\n        if (node.path(\"car\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car>> checked = acceptMany(node.path(\"car\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Car,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"car\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"car\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"car\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _car = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (node.path(\"country\").getNodeType() != JsonNodeType.MISSING){\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country>> checked = acceptMany(node.path(\"country\"), this::read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Country,m -> defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newInvalidInputErrorDefect(\"country\"+\": \"+m,\"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer\")));\n                for (int i=0; i<checked.size(); i++)\n                {\n                    java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> propertyDefects = checked.get(i).getDefects();\n                    org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode pathNode = i == 0\n                            ? org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"country\")\n                            : org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicRelativePathNode.newRelativePathNode(\"country\", i);\n                    defects.addAll(propertyDefects.stream().map(d -> org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.prefixPath(d, pathNode)).collect(java.util.stream.Collectors.toList()));\n                }\n        _country = checked.stream().map(c -> c.getValue()).filter(v -> v != null).collect(java.util.stream.Collectors.toList());\n        }\n        if (_name.size() > 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for name: expected [0..1] found [\" + _name.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer\"));\n        }\n        if (_car.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for car: expected [1] found [\" + _car.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer\"));\n        }\n        if (_country.size() != 1)\n        {\n          defects.add(org.finos.legend.engine.plan.dependencies.domain.dataQuality.BasicDefect.newClassStructureDefect(\"Invalid multiplicity for country: expected [1] found [\" + _country.size() + \"]\", \"meta::external::store::mongodb::executionPlan::platformBinding::legendJava::test::Manufacturer\"));\n        }\n\n        if (defects.stream().anyMatch(d -> d.getEnforcementLevel() == EnforcementLevel.Critical))\n        {\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer getValue() { return null; }\n        };\n        }\n        else\n        {\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Manufacturer_Impl) this.stack.peek()).name = _name.isEmpty() ? null : _name.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Manufacturer_Impl) this.stack.peek()).car = _car.get(0);\n        ((_pure.plan.root.n1.localGraph.n1.meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Manufacturer_Impl) this.stack.peek()).country = _country.get(0);\n            _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer value = (_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer) this.stack.pop();\n            return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return null; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer getValue() { return value; }\n        };\n        }\n    }\n\n    private String acceptString(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE String\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.textValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private boolean acceptBoolean(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Boolean\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"BOOLEAN\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.booleanValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private long acceptInteger(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Integer\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.longValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private double acceptFloat(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Float\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.doubleValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private BigDecimal acceptDecimal(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Decimal\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\"),\n                                     JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.getNodeType()\n                       .equals(JsonNodeType.STRING)\n                       ? new BigDecimal(node.textValue())\n                       : node.decimalValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private Number acceptNumber(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Number\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"STRING\"),\n                                     JsonNodeType.valueOf(\"NUMBER\")),\n                       node.getNodeType(),\n                       errorMessage);\n            return node.getNodeType()\n                       .equals(JsonNodeType.STRING)\n                       ? (Number) new BigDecimal(node.textValue())\n                       : node.isDouble() == true\n                             ? node.doubleValue()\n                             : node.longValue();\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private <T> List<T> acceptMany(JsonNode node,\n                                   Function<JsonNode, T> acceptor,\n                                   Consumer<String> defectRecorder)\n    {\n        List<T> result = new ArrayList<T>();\n        if (node.isNull())\n        {\n            return result;\n        }\n        if (node.isArray())\n        {\n            for (JsonNode n: node)\n            {\n                try\n                {\n                    result.add(acceptor.apply(n));\n                }\n                catch (org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException ex)\n                {\n                    defectRecorder.accept(ex.getMessage());\n                }\n            }\n        }\n        else\n        {\n            try\n            {\n                result.add(acceptor.apply(node));\n            }\n            catch (org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException ex)\n            {\n                defectRecorder.accept(ex.getMessage());\n            }\n        }\n        return result;\n    }\n\n    private void check(JsonNodeType expectedNode, JsonNodeType currentNode)\n    {\n        check(expectedNode, currentNode, \"Failed to parse JSON, expected '\" + expectedNode + \"', Found \" + currentNode);\n    }\n\n    private void check(JsonNodeType expectedNode, JsonNodeType currentNode, String errorMessage)\n    {\n        check(Collections.singletonList(expectedNode), currentNode, errorMessage);\n    }\n\n    private void check(List<JsonNodeType> expectedNodes,\n                       JsonNodeType currentNode,\n                       String errorMessage)\n    {\n        if (!expectedNodes.contains(currentNode))\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(errorMessage);\n        }\n    }\n\n    public void initReading()\n    {\n        this.objectMapper = new ObjectMapper();\n    }\n\n    public boolean isFinished()\n    {\n        try\n        {\n            return !this.mCursor.hasNext();\n        }\n        catch (IllegalStateException ex)\n        {\n            if (ex.getMessage().equals(\"Cursor has been closed\"))\n            {\n                return true;\n            }\n            else\n            {\n                throw ex;\n            }\n        }\n    }\n\n    public void destroyReading()\n    {\n    }\n\n    private PureDate acceptDateTime(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE DateTime\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"OBJECT\")),\n                       node.getNodeType(),\n                       errorMessage);\n            if (node.has(\"$date\") && node.get(\"$date\").isLong())\n            {\n                return org.finos.legend.engine.plan.dependencies.domain.date.PureDate\n                .fromDate(new Date(node.get(\"$date\").longValue()));\n            }\n            else\n            {\n                throw new IllegalArgumentException(\"Failed to parse $date from Mongo ISO Date field\");\n            }\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private PureDate acceptDate(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE Date\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"OBJECT\")),\n                       node.getNodeType(),\n                       errorMessage);\n            if (node.has(\"$date\") && node.get(\"$date\").isLong())\n            {\n                return org.finos.legend.engine.plan.dependencies.domain.date.PureDate\n                .fromDate(new Date(node.get(\"$date\").longValue()));\n            }\n            else\n            {\n                throw new IllegalArgumentException(\"Failed to parse $date from Mongo ISO Date field\");\n            }\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    private PureDate acceptStrictDate(JsonNode node)\n    {\n        try\n        {\n            String errorMessage = \"Unexpected node type:\" + node.getNodeType() + \" for PURE StrictDate\";\n            this.check(Arrays.asList(JsonNodeType.valueOf(\"OBJECT\")),\n                       node.getNodeType(),\n                       errorMessage);\n            if (node.has(\"$date\") && node.get(\"$date\").isLong())\n            {\n                return org.finos.legend.engine.plan.dependencies.domain.date.PureDate\n                .fromDate(new Date(node.get(\"$date\").longValue()));\n            }\n            else\n            {\n                throw new IllegalArgumentException(\"Failed to parse $date from Mongo ISO Date field\");\n            }\n        }\n        catch (IllegalArgumentException ex)\n        {\n            throw new org.finos.legend.engine.plan.dependencies.store.inMemory.DataParsingException(ex.getMessage());\n        }\n    }\n\n    public Collection<IChecked<Person>> readCheckedObjects()\n    {\n        try\n        {\n            this.recordCount++;\n            JsonNode node = this.objectMapper.readTree(this.mCursor.next().toJson());\n            IChecked<Person> object = this.read_meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person(node);\n            long recordNumber = this.recordCount;\n            String json = node.toString();\n            _pure.app.meta.pure.mapping.modelToModel.JsonDataRecord source = new _pure.app.meta.pure.mapping.modelToModel.JsonDataRecord()\n            {\n                public long getNumber()\n                {\n                    return recordNumber;\n                }\n                public String getRecord()\n                {\n                    return json;\n                }\n            };\n            return Collections.singleton(new IChecked<Person>()\n            {\n                public List<IDefect> getDefects()\n                {\n                    return object.getDefects();\n                }\n                public Object getSource()\n                {\n                    return source;\n                }\n                public Person getValue()\n                {\n                    return object.getValue();\n                }\n            });\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.n1",
        "name": "meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address_Impl",
        "source": "package _pure.plan.root.n1.localGraph.n1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\nclass meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address, IReferencedObject\n{\n    String street;\n    String city;\n    String postalCode;\n    _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country country;\n\n    meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Address_Impl()\n    {\n    }\n\n    public String getStreet()\n    {\n        return this.street;\n    }\n\n    public String getCity()\n    {\n        return this.city;\n    }\n\n    public String getPostalCode()\n    {\n        return this.postalCode;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country getCountry()\n    {\n        return this.country;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return null;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.n1",
        "name": "meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Car_Impl",
        "source": "package _pure.plan.root.n1.localGraph.n1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\nclass meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Car_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car, IReferencedObject\n{\n    String model;\n    _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person person;\n    _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer manufacturer;\n\n    meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Car_Impl()\n    {\n    }\n\n    public String getModel()\n    {\n        return this.model;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person getPerson()\n    {\n        return this.person;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer getManufacturer()\n    {\n        return this.manufacturer;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return null;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.n1",
        "name": "meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Country_Impl",
        "source": "package _pure.plan.root.n1.localGraph.n1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\nclass meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Country_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country, IReferencedObject\n{\n    String continent;\n    String countryCode;\n    _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer manufacturer;\n\n    meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Country_Impl()\n    {\n    }\n\n    public String getContinent()\n    {\n        return this.continent;\n    }\n\n    public String getCountryCode()\n    {\n        return this.countryCode;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer getManufacturer()\n    {\n        return this.manufacturer;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return null;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.n1",
        "name": "meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm_Impl",
        "source": "package _pure.plan.root.n1.localGraph.n1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\nclass meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm, IReferencedObject\n{\n    String legalName;\n    PureDate dateFounded;\n    List<String> industrySectors;\n    _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address address;\n    _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person person;\n\n    meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Firm_Impl()\n    {\n    }\n\n    public String getLegalName()\n    {\n        return this.legalName;\n    }\n\n    public PureDate getDateFounded()\n    {\n        return this.dateFounded;\n    }\n\n    public List<String> getIndustrySectors()\n    {\n        return this.industrySectors == null ? Collections.emptyList() : this.industrySectors;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address getAddress()\n    {\n        return this.address;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person getPerson()\n    {\n        return this.person;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return null;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.n1",
        "name": "meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Manufacturer_Impl",
        "source": "package _pure.plan.root.n1.localGraph.n1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\nclass meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Manufacturer_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Manufacturer, IReferencedObject\n{\n    String name;\n    _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car car;\n    _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country country;\n\n    meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Manufacturer_Impl()\n    {\n    }\n\n    public String getName()\n    {\n        return this.name;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car getCar()\n    {\n        return this.car;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Country getCountry()\n    {\n        return this.country;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return null;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph.n1",
        "name": "meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl",
        "source": "package _pure.plan.root.n1.localGraph.n1;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.EnforcementLevel;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RelativePathNode;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.RuleType;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked;\n\nclass meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl implements _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person, IReferencedObject, Constrained<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person>\n{\n    String firstName;\n    String lastName;\n    Long age;\n    PureDate birthDate;\n    String phoneNumber;\n    List<String> otherPhoneNumbers;\n    String email;\n    _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address address;\n    List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> car;\n    _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm firm;\n\n    meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl()\n    {\n    }\n\n    public String getFirstName()\n    {\n        return this.firstName;\n    }\n\n    public String getLastName()\n    {\n        return this.lastName;\n    }\n\n    public Long getAge()\n    {\n        return this.age;\n    }\n\n    public PureDate getBirthDate()\n    {\n        return this.birthDate;\n    }\n\n    public String getPhoneNumber()\n    {\n        return this.phoneNumber;\n    }\n\n    public List<String> getOtherPhoneNumbers()\n    {\n        return this.otherPhoneNumbers == null ? Collections.emptyList() : this.otherPhoneNumbers;\n    }\n\n    public String getEmail()\n    {\n        return this.email;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Address getAddress()\n    {\n        return this.address;\n    }\n\n    public List<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Car> getCar()\n    {\n        return this.car == null ? Collections.emptyList() : this.car;\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Firm getFirm()\n    {\n        return this.firm;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        return null;\n    }\n\n    public List<IDefect> allConstraints()\n    {\n        return this.allConstraints(new GraphContext());\n    }\n\n    public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person> toChecked(Object source,\n                                                                                                                          boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.mongodb.executionPlan.platformBinding.legendJava.test.Person getValue() { return meta_external_store_mongodb_executionPlan_platformBinding_legendJava_test_Person_Impl.this; }\n        };\n    }\n\n    public List<IDefect> allConstraints(GraphContext context)\n    {\n        List<IDefect> result = new ArrayList<IDefect>();\n        return result;\n    }\n}"
      }
    ],
    "_type": "java"
  }
}